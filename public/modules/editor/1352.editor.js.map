{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/modules/TemplateLoader.js","webpack:///./resources/modules/front-app/src/js/classes/FrontElementsFabric.js"],"names":["TemplateLoader","this","resource","Resource","route","templatesCache","AltrpModel","templateId","force","update","Number","hasProperty","_","get","Promise","resolve","reject","pendingCallbacks","push","statuses","template","setProperty","getProperty","isArray","forEach","callback","loadTemplate","templateData","JSON","parse","frontElementsFabric","window","templateLoader","FrontElementsFabric","object","parent","pageId","models","children","element","FrontElement","addModelInfo","modelName","modelId","model","length","child","frontElementsManager","checkElementExists","name","parseData","id","lastElement","settings","type","dynamicContentSettings","setParent","clonedElement","cloneDeep","updateParents","c"],"mappings":"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","file":"1352.editor.js","sourcesContent":["import Resource from \"../Resource\";\r\nimport AltrpModel from \"../AltrpModel\";\r\nimport frontElementsFabric from \"../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\n\r\n/**\r\n * @class TemplateLoader\r\n */\r\nclass TemplateLoader {\r\n  /**\r\n   * Хранилище статусов получения данных, чтобы не делать много параллельных запросов\r\n   * @type {{}}\r\n   */\r\n  static statuses = {};\r\n  /**\r\n   * Хранилище обратных вызовов, чтобы не делать много параллельных запросов\r\n   * @type {{}}\r\n   */\r\n  static pendingCallbacks = {};\r\n\r\n\r\n  constructor(){\r\n    this.resource = new Resource({route: '/ajax/templates'});\r\n    this.templatesCache = new AltrpModel({});\r\n  }\r\n\r\n  /**\r\n   * Загрузить шаблон по ид\r\n   * @param {integer | string} templateId\r\n   * @param {boolean} force\r\n   * @param {*} templateId\r\n   */\r\n  async loadTemplate(templateId, force = false){\r\n\r\n    let update = force;\r\n    templateId = Number(templateId) ? Number(templateId) : templateId;\r\n\r\n    if(! update){\r\n      update = ! this.templatesCache.hasProperty(templateId);\r\n    }\r\n  \r\n    if(_.get(TemplateLoader, `statuses.${templateId}`) === 'loading'){\r\n      return new Promise((resolve, reject) => {\r\n        TemplateLoader.pendingCallbacks[templateId] = TemplateLoader.pendingCallbacks[templateId] || [];\r\n        TemplateLoader.pendingCallbacks[templateId].push(resolve);\r\n      })\r\n    }\r\n\r\n    TemplateLoader.statuses[templateId] = 'loading';\r\n\r\n    try {\r\n\r\n      let template = null;\r\n\r\n      if (update) {\r\n        template = await this.resource.get(templateId);\r\n        this.templatesCache.setProperty(templateId, template);\r\n      } else {\r\n        template = this.templatesCache.getProperty(templateId);\r\n      }\r\n\r\n      if(_.isArray(TemplateLoader.pendingCallbacks[templateId])){\r\n        TemplateLoader.pendingCallbacks[templateId].forEach(callback=>{\r\n          callback(template);\r\n        });\r\n      }\r\n\r\n      TemplateLoader.statuses[templateId] = 'loaded';\r\n      TemplateLoader.pendingCallbacks[templateId] = [];\r\n      return template;\r\n\r\n    }catch(error){\r\n      if(_.isArray(TemplateLoader.pendingCallbacks[templateId])){\r\n        TemplateLoader.pendingCallbacks[templateId].forEach(callback=>{\r\n          callback(null);\r\n        });\r\n      }\r\n      TemplateLoader.statuses[templateId] = 'loaded';\r\n      TemplateLoader.pendingCallbacks[templateId] = [];\r\n      return null;\r\n    }\r\n\r\n    //return Promise.resolve(this.templatesCache.getProperty(templateId));\r\n  }\r\n\r\n  /**\r\n   * Загрузить шаблон по ид\r\n   * @param {integer | string} templateId\r\n   * @param {boolean} force\r\n   * @param {*} templateId\r\n   */\r\n  async loadParsedTemplate(templateId, force = false){\r\n\r\n    if(! templateId){\r\n      return null;\r\n    }\r\n    templateId = Number(templateId) ? Number(templateId) : templateId;\r\n\r\n    let templateData = _.get((await this.loadTemplate(templateId, force)), 'data');\r\n    templateData = JSON.parse(templateData);\r\n\r\n    return frontElementsFabric.parseData(templateData);\r\n  }\r\n\r\n}\r\n\r\n window.templateLoader =  new TemplateLoader();\r\n\r\nexport default window.templateLoader;","import FrontElement from \"./FrontElement\";\r\n\r\nclass FrontElementsFabric {\r\n  /**\r\n   * парсим данные шаблона\r\n   * @param {object} object\r\n   * @param {FrontElement | null} parent\r\n   * @param {int | null} pageId\r\n   * @param {array | null} models\r\n   * @return {FrontElement}\r\n   */\r\n  parseData(object, parent, pageId, models){\r\n    let children = [];\r\n    /**\r\n     * @member {FrontElement} element\r\n     * */\r\n    let element = new FrontElement(object);\r\n    if(pageId){\r\n      element.addModelInfo({\r\n        modelName: 'page',\r\n        modelId: pageId,\r\n      });\r\n    }\r\n    if(_.isArray(models)){\r\n      for(let model of models){\r\n        element.addModelInfo({\r\n            ...model,\r\n        });\r\n      }\r\n    }\r\n    if( object.children && object.children.length ){\r\n      for( let child of object.children){\r\n        window.frontElementsManager.checkElementExists(child.name) ?\r\n            children.push( this.parseData(child, element) ) : '';\r\n      }\r\n    }\r\n    element.id = object.id;\r\n    element.lastElement = object.lastElement;\r\n    element.children = children;\r\n    element.settings = object.settings;\r\n    element.name = object.name;\r\n    element.type = object.type;\r\n    element.dynamicContentSettings = object.dynamicContentSettings;\r\n    if(parent){\r\n      element.setParent(parent);\r\n    }\r\n    element.update();\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Правильное клонирование элемента\r\n   * @params {FrontElement} element\r\n   * @return {FrontElement | null}\r\n   */\r\n  cloneElement(element){\r\n    if(! element){\r\n      return null;\r\n    }\r\n    let clonedElement = _.cloneDeep(element);\r\n    // console.log(element.idForAction);\r\n    this.updateParents(clonedElement);\r\n    return clonedElement\r\n  }\r\n\r\n  /**\r\n   * Обновляет ссылку на родителя у элементов\r\n   * @params {FrontElement} element\r\n   */\r\n\r\n  updateParents(element){\r\n    if(_.isArray(element.children)){\r\n      element.children.forEach(c=>{\r\n        c.setParent(element);\r\n        this.updateParents(c);\r\n        // console.log(c);\r\n      });\r\n    }\r\n  }\r\n}\r\nwindow.frontElementsFabric = new FrontElementsFabric();\r\nexport default window.frontElementsFabric;\r\n"],"sourceRoot":""}