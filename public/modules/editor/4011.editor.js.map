{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-input/AltrpInputFile.js","webpack:///./resources/modules/editor/src/js/components/altrp-input/AltrpInput.js"],"names":["props","labelClick","e","isEditor","preventDefault","deleteItem","idx","files","state","splice","filesForDisplay","length","setState","console","log","_","each","f","fr","FileReader","readAsDataURL","onload","push","src","result","alt","name","isFunction","onChange","target","FileList","types","settings","content_accept","split","_f","forEach","type","trim","replace","indexOf","multiple","this","select2_multiple","placeholder","content_placeholder","accept","classes","className","join","onClick","iconsManager","renderIcon","renderAsset","map","key","Component","MaskedInput","React","isValid","checkValidity","mask","value","isValueMatchMask","set","prevProps","prevState","content_mask","content_type","mask_mismatch_message","inputProps","m","guide","onBlur","fallback","validateEmail"],"mappings":"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","file":"4011.editor.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { iconsManager } from \"../../../../../admin/src/js/helpers\";\r\nimport { isEditor, renderAsset } from \"../../../../../front-app/src/js/helpers\";\r\n\r\nclass AltrpInputFile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filesForDisplay: [],\r\n      files: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Клик по леблу\r\n   * @param {{}} e\r\n   */\r\n  labelClick = e => {\r\n    if (isEditor()) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n  /**\r\n   * Удалить элемент\r\n   * @param e\r\n   * @param idx\r\n   */\r\n  deleteItem = (e, idx) => {\r\n    e.preventDefault();\r\n    let { files } = this.state;\r\n    files.splice(idx, 1);\r\n    let filesForDisplay = [];\r\n    if (!files.length) {\r\n      this.setState(state => ({ ...state, filesForDisplay, files }));\r\n    }\r\n    console.log(files);\r\n    _.each(files, f => {\r\n      let fr = new FileReader();\r\n      fr.readAsDataURL(f);\r\n      fr.onload = () => {\r\n        filesForDisplay.push({\r\n          src: fr.result,\r\n          alt: f.name || \"\"\r\n        });\r\n        if (filesForDisplay.length === files.length) {\r\n          this.setState(state => ({ ...state, filesForDisplay, files }));\r\n        }\r\n      };\r\n    });\r\n    if (_.isFunction(this.props.onChange)) {\r\n      this.props.onChange(files);\r\n    }\r\n  };\r\n  /**\r\n   * Обновление Файлов\r\n   * @param e\r\n   */\r\n  onChange = e => {\r\n    if (!e.target.files instanceof FileList) {\r\n      return;\r\n    }\r\n    let files = [];\r\n    let types = this.props.settings.content_accept\r\n      ? this.props.settings.content_accept.split(\",\")\r\n      : [];\r\n\r\n    _.each(e.target.files, _f => {\r\n      types.forEach(type => {\r\n        type = type.trim();\r\n        type = type.replace(\"*\", \"\");\r\n        if (_f.type.indexOf(type) === 0) {\r\n          files.push(_f);\r\n        }\r\n      });\r\n    });\r\n    let filesForDisplay = [];\r\n    if (!files.length) {\r\n      this.setState(state => ({ ...state, filesForDisplay, files }));\r\n    }\r\n    _.each(files, f => {\r\n      let fr = new FileReader();\r\n      fr.readAsDataURL(f);\r\n      fr.onload = () => {\r\n        filesForDisplay.push({\r\n          src: fr.result,\r\n          alt: f.name || \"\"\r\n        });\r\n        if (filesForDisplay.length === files.length) {\r\n          console.log(filesForDisplay);\r\n          this.setState(state => ({ ...state, filesForDisplay, files }));\r\n        }\r\n      };\r\n    });\r\n    if (_.isFunction(this.props.onChange)) {\r\n      this.props.onChange(files);\r\n    }\r\n  };\r\n  render() {\r\n    // console.log(this.props);\r\n    let multiple = this.props.settings.select2_multiple;\r\n    let placeholder = this.props.settings.content_placeholder || \"\";\r\n    const { filesForDisplay } = this.state;\r\n    let accept = this.props.settings.content_accept || \"\";\r\n    const classes = [\"altrp-field-file\"];\r\n    if (!filesForDisplay.length) {\r\n      classes.push(\"altrp-field-file_empty\");\r\n    }\r\n    return (\r\n      <label className={classes.join(\" \")} onClick={this.labelClick}>\r\n        <span className=\"altrp-field-file__placeholder\">{placeholder}</span>\r\n        <input\r\n          type=\"file\"\r\n          className=\"altrp-field-file__field\"\r\n          multiple={multiple}\r\n          accept={accept}\r\n          onChange={this.onChange}\r\n        />\r\n        <span className=\"altrp-field-file-media-list media-list\">\r\n          {isEditor() ? (\r\n            <span className=\"media-list-item\">\r\n              {iconsManager().renderIcon(\"times\", {\r\n                className: \"media-list-item__remove\"\r\n              })}\r\n              {renderAsset(\r\n                {},\r\n                {\r\n                  className: \"media-list-item__img\"\r\n                }\r\n              )}\r\n            </span>\r\n          ) : (\r\n            filesForDisplay.map((f, idx) => {\r\n              return (\r\n                <span key={idx} className=\"media-list-item\">\r\n                  {iconsManager().renderIcon(\"times\", {\r\n                    className: \"media-list-item__remove\",\r\n                    onClick: e => {\r\n                      this.deleteItem(e, idx);\r\n                    }\r\n                  })}\r\n                  <img className=\"media-list-item__img\" {...f} />\r\n                </span>\r\n              );\r\n            })\r\n          )}\r\n        </span>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AltrpInputFile;\r\n","import React, { Component } from \"react\";\r\nimport (\"./altrp-input.scss\");\r\nimport AltrpInputFile from \"./AltrpInputFile\";\r\nimport { isValueMatchMask, validateEmail } from \"../../../../../front-app/src/js/helpers\";\r\nconst MaskedInput = React.lazy(() => import(\"react-text-mask\"));\r\n\r\nclass AltrpInput extends Component {\r\n  state = {\r\n    isValid: true\r\n  };\r\n\r\n  checkValidity = mask => {\r\n    if (! mask) return;\r\n    let value = this.props.value.replace(/_/g, '');\r\n    let isValid = ! ! (value.length && isValueMatchMask(value, mask));\r\n    this.setState(state => ({...state, isValid}));\r\n    _.set(this, 'props.element.maskIsValid', isValid);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState){\r\n    if((! this.props.value) && this.props.settings.content_mask && this.state.isValid){\r\n      this.setState(state => ({...state, isValid: false}));\r\n      _.set(this, 'props.element.maskIsValid', false);\r\n    }\r\n  }\r\n  render() {\r\n    const { isValid } = this.state;\r\n    const { content_type, content_mask, mask_mismatch_message } = this.props.settings;\r\n    const inputProps = {\r\n      ...this.props,\r\n    };\r\n    switch (content_type) {\r\n      case \"file\": {\r\n        return <AltrpInputFile {...inputProps} />;\r\n      }\r\n    }\r\n    if (content_mask) {\r\n      let mask = content_mask.split(\"\");\r\n      mask = mask.map(m => {\r\n        switch (m) {\r\n          case \"_\": {\r\n            return /\\d/;\r\n          }\r\n          case \"*\": {\r\n            return /\\S/;\r\n          }\r\n          default:\r\n            return m;\r\n        }\r\n      });\r\n      inputProps.mask = mask;\r\n      inputProps.guide = true;\r\n      inputProps.onBlur = e => {\r\n        this.props.onBlur(e);\r\n        // if (mask_mismatch_message) {\r\n        //   this.checkValidity(mask)\r\n        // }\r\n        this.checkValidity(mask)\r\n      };\r\n      inputProps.onChange = e => {\r\n        this.props.onChange(e);\r\n        if (! isValid) {\r\n          this.checkValidity(mask)\r\n        }\r\n      };\r\n      return (\r\n        <React.Suspense fallback={<input {...this.props} />}>\r\n          <MaskedInput {...inputProps} />\r\n          {!isValid && mask_mismatch_message && <p className=\"mask-mismatch-message\">{mask_mismatch_message}</p>}\r\n          \r\n        </React.Suspense>\r\n      );\r\n    }\r\n\r\n    if (content_type === 'email' && mask_mismatch_message) {\r\n      inputProps.onBlur = e => {\r\n        this.props.onBlur(e);\r\n        this.setState({ isValid: validateEmail(e.target.value) });\r\n      };\r\n\r\n      if (!isValid) {\r\n        inputProps.onChange = e => {\r\n          this.props.onChange(e);\r\n          this.setState({ isValid: validateEmail(e.target.value) });\r\n        };\r\n      }\r\n    }\r\n\r\n    return <>\r\n      <input {...inputProps} />\r\n      {!isValid && content_type === 'email' && mask_mismatch_message &&\r\n        <p className=\"mask-mismatch-message\">{mask_mismatch_message}</p>}\r\n    </>;\r\n  }\r\n}\r\n\r\nexport default AltrpInput;\r\n"],"sourceRoot":""}