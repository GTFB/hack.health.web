{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/widgets/styled-components/ElementWrapperComponent.js","webpack:///./resources/modules/front-app/src/js/components/ElementWrapper.js"],"names":["ElementWrapperDivComponent","styled","settings","styles","layout_column_width","getResponsiveSetting","Number","ElementWrapper","props","updateStore","state","currentModel","appStore","getState","setState","currentUser","currentDataStorage","elementDisplay","element","getSettings","wrapper","elementWrapperRef","React","createRef","elementRef","dispatch","addElement","error","errorInfo","this","isEditor","window","frontApp","onWidgetMount","_","isFunction","update","updateFonts","checkElementDisplay","get","stylesModule","stylesContainer","current","getElementsByClassName","getId","prevProps","prevState","getProperty","getName","title","currentTitle","replaceContentWithData","altrpPage","changeCurrentPageProperty","setTitle","updateToken","altrpRandomId","conditions","map","c","modelField","conditional_model_field","operator","conditional_other_operator","value","conditional_other_condition_value","conditionsChecker","getCurrentModel","formsStore","formId","logic","formConditions","display","forEach","altrpCompare","field_id","hide_on_wide_screen","hide_on_desktop","hide_on_laptop","hide_on_tablet","hide_on_big_phone","hide_on_small_phone","hide_on_trigger","isFixed","tooltip_text","tooltip_position","classes","getType","getPrefixClasses","className","data-eltype","style","whiteSpace","toString","componentStack","width","CSSId","getData","ContentComponent","frontElementsManager","getComponentClass","content","createElement","ref","rootElement","children","getChildren","match","altrpresponses","altrpPageState","altrpMeta","currentScreen","baseRender","history","getTemplateType","WrapperComponent","GalleryComponent","ImageComponent","ButtonComponent","TextComponent","CarouselComponent","DividerComponent","AccordionComponent","MenuComponent","BreadcrumbsComponent","hideTriggers","includes","elementId","id","AltrpTooltip","position","Component","connect","forwardRef","withRouter"],"mappings":"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","file":"5899.editor.js","sourcesContent":["import styled from 'styled-components';\r\nimport { getResponsiveSetting } from \"../../../../../../front-app/src/js/helpers\";\r\n\r\nconst settingsToStyles = ({ settings }) => {\r\n   let styles = '';\r\n\r\n   styles += '&.altrp-column{';\r\n   const layout_column_width = getResponsiveSetting(settings, 'layout_column_width');\r\n   if (layout_column_width) {\r\n      if (Number(layout_column_width)) {\r\n         styles += `width:${layout_column_width}%;`;\r\n      } else {\r\n         styles += `width:${layout_column_width};`;\r\n      }\r\n   }\r\n\r\n   styles += '}';\r\n   return styles;\r\n};\r\n\r\nexport const ElementWrapperDivComponent = styled.div`${settingsToStyles}`;","\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { altrpCompare, altrpRandomId, conditionsChecker, isEditor, replaceContentWithData, setTitle } from \"../helpers\";\r\nimport { addElement } from \"../store/elements-storage/actions\";\r\nimport AltrpTooltip from \"../../../../editor/src/js/components/altrp-tooltip/AltrpTooltip\";\r\nimport { changeCurrentPageProperty } from \"../store/current-page/actions\";\r\nimport { ElementWrapperDivComponent } from \"../../../../editor/src/js/components/widgets/styled-components/ElementWrapperComponent\";\r\nimport ImageComponent from \"../../../../editor/src/js/components/widgets/styled-components/ImageComponent\";\r\nimport CarouselComponent from \"../../../../editor/src/js/components/widgets/styled-components/CarouselComponent\";\r\nimport GalleryComponent from \"../../../../editor/src/js/components/widgets/styled-components/GalleryComponent\";\r\nimport ButtonComponent from \"../../../../editor/src/js/components/widgets/styled-components/ButtonComponent\";\r\nimport DividerComponent from \"../../../../editor/src/js/components/widgets/styled-components/DividerComponent\";\r\nimport AccordionComponent from \"../../../../editor/src/js/components/widgets/styled-components/AccordionComponent\";\r\nimport TextComponent from \"../../../../editor/src/js/components/widgets/styled-components/TextComponent\";\r\nimport MenuComponent from \"../../../../editor/src/js/components/widgets/styled-components/MenuComponent\";\r\nimport BreadcrumbsComponent from \"../../../../editor/src/js/components/widgets/styled-components/BreadcrumbsComponent\";\r\n\r\nclass ElementWrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      elementDisplay: !this.props.element.getSettings(\"default_hidden\")\r\n    };\r\n    props.element.wrapper = this;\r\n    this.elementWrapperRef = React.createRef();\r\n    this.elementRef = React.createRef();\r\n    appStore.dispatch(addElement(this));\r\n  }\r\n\r\n  /**\r\n   * Отлавливаем ошибки\r\n   * @param error\r\n   * @param errorInfo\r\n   */\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState(state => ({\r\n      ...state,\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Иногда надо обновить элемент (FrontElement)\r\n   */\r\n  componentDidMount() {\r\n    ! isEditor() && window.frontApp.onWidgetMount();\r\n    if (_.isFunction(this.props.element.update)) {\r\n      this.props.element.update();\r\n      this.props.element.updateFonts();\r\n    }\r\n    this.checkElementDisplay();\r\n  }\r\n  /**\r\n   * Подписываемся на обновление store редакса\r\n   */\r\n  updateStore = () => {\r\n    if (this.state.currentModel !== appStore.getState().currentModel) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentModel: appStore.getState().currentModel\r\n      }));\r\n    }\r\n    /**\r\n     * Обновляем пользователя\r\n     */\r\n    if (this.state.currentUser !== appStore.getState().currentUser) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentModel: appStore.getState().currentUser\r\n      }));\r\n    }\r\n\r\n    /**\r\n     * Обновляем currentDataStorage\r\n     */\r\n    if (\r\n      this.state.currentDataStorage !== appStore.getState().currentDataStorage\r\n    ) {\r\n      this.setState(state => ({\r\n        ...state,\r\n        currentDataStorage: appStore.getState().currentDataStorage\r\n      }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Вернет HTMLElement, в котором записаны css стили текущего компонента\r\n   * @return {null | HTMLElement}\r\n   */\r\n  getStylesHTMLElement() {\r\n    if (!_.get(window, \"stylesModule.stylesContainer.current\")) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      window.stylesModule.stylesContainer.current.getElementsByClassName(\r\n        `altrp-styles${this.props.element.getId()}`\r\n      )[0] || null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Нужно ли обновить отображение обертки элементов\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState) {\r\n    this.checkElementDisplay();\r\n    if (appStore.getState().currentModel.getProperty('altrpModelUpdated') &&\r\n      appStore.getState().currentDataStorage.getProperty('currentDataStorageLoaded') &&\r\n      !isEditor() &&\r\n      this.props.element.getName() === 'section') {\r\n      let title = appStore.getState().currentTitle;\r\n      title = replaceContentWithData(title);\r\n      if (appStore.getState().altrpPage.getProperty('title') !== title) {\r\n        appStore.dispatch(changeCurrentPageProperty('title', title));\r\n      }\r\n      setTitle(title);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновить элемент изменив this.state.updateToken\r\n   */\r\n  updateElement() {\r\n    this.setState(state => ({ ...state, updateToken: altrpRandomId() }))\r\n  }\r\n\r\n  /**\r\n   * Проверка видимости элемента\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  checkElementDisplay(prevProps, prevState) {\r\n    /**\r\n     * @member {FrontElement} element\r\n     */\r\n    const { element } = this.props;\r\n    if (!element.getSettings(\"conditional_other\")) {\r\n      return;\r\n    }\r\n    let conditions = element.getSettings(\"conditions\", []);\r\n    conditions = conditions.map(c => {\r\n      const {\r\n        conditional_model_field: modelField,\r\n        conditional_other_operator: operator,\r\n        conditional_other_condition_value: value\r\n      } = c;\r\n      return {\r\n        modelField,\r\n        operator,\r\n        value\r\n      };\r\n    });\r\n    let elementDisplay = conditionsChecker(\r\n      conditions,\r\n      element.getSettings(\"conditional_other_display\") === \"AND\",\r\n      this.props.element.getCurrentModel(),\r\n      true\r\n    );\r\n\r\n    if (this.state.elementDisplay === elementDisplay) {\r\n      return;\r\n    }\r\n\r\n    this.setState(state => ({\r\n      ...state,\r\n      elementDisplay\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Переключает видимость элемента\r\n   */\r\n  toggleElementDisplay() {\r\n    this.setState(state => ({\r\n      ...state,\r\n      elementDisplay: !state.elementDisplay\r\n    }));\r\n  }\r\n  /**\r\n   * Метод для проверки видимости поля формы\r\n   * @return {boolean}\r\n   */\r\n  inputIsDisplay() {\r\n    const { formsStore } = this.state;\r\n    const formId = this.props.element.getSettings(\"form_id\", \"\");\r\n    const logic = this.props.element.getSettings(\r\n      \"form_condition_display_on\",\r\n      \"AND\"\r\n    );\r\n    const formConditions = this.props.element.getSettings(\r\n      \"form_conditions\",\r\n      []\r\n    );\r\n    let display = true;\r\n    formConditions.forEach(c => {\r\n      if (logic === \"AND\") {\r\n        display *= altrpCompare(\r\n          _.get(formsStore, `${formId}.${c.field_id}`),\r\n          c.value,\r\n          c.operator\r\n        );\r\n      } else {\r\n        display += altrpCompare(\r\n          _.get(formsStore, `${formId}.${c.field_id}`),\r\n          c.value,\r\n          c.operator\r\n        );\r\n      }\r\n    });\r\n    return display;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      hide_on_wide_screen,\r\n      hide_on_desktop,\r\n      hide_on_laptop,\r\n      hide_on_tablet,\r\n      hide_on_big_phone,\r\n      hide_on_small_phone,\r\n      hide_on_trigger,\r\n      isFixed,\r\n      tooltip_text,\r\n      tooltip_position\r\n    } = this.props.element.settings;\r\n    let classes = `altrp-element altrp-element${this.props.element.getId()} altrp-element_${this.props.element.getType()}`;\r\n    classes += this.props.element.getPrefixClasses() + \" \";\r\n    if (this.props.element.getType() === \"widget\") {\r\n      classes += ` altrp-widget_${this.props.element.getName()}`;\r\n    }\r\n    if (hide_on_wide_screen) {\r\n      classes += \" hide_on_wide_screen\";\r\n    }\r\n    if (hide_on_desktop) {\r\n      classes += \" hide_on_desktop\";\r\n    }\r\n    if (hide_on_laptop) {\r\n      classes += \" hide_on_laptop\";\r\n    }\r\n    if (hide_on_tablet) {\r\n      classes += \" hide_on_tablet\";\r\n    }\r\n    if (hide_on_big_phone) {\r\n      classes += \" hide_on_big_phone\";\r\n    }\r\n    if (hide_on_small_phone) {\r\n      classes += \" hide_on_small_phone\";\r\n    }\r\n    if (isFixed) {\r\n      classes += \" fixed-section\";\r\n    }\r\n    if (this.state.errorInfo) {\r\n      return (\r\n        <div className=\"altrp-error\" data-eltype={this.props.element.getType()}>\r\n          <h2>Something went wrong.</h2>\r\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\r\n            {this.state.error && this.state.error.toString()}\r\n            <br />\r\n            {this.state.errorInfo.componentStack}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    const styles = {};\r\n\r\n    if (this.props.element.getResponsiveSetting('layout_column_width')) {\r\n      if (Number(this.props.element.getResponsiveSetting('layout_column_width'))) {\r\n        styles.width = this.props.element.getResponsiveSetting('layout_column_width') + '%';\r\n      } else {\r\n        styles.width = this.props.element.getResponsiveSetting('layout_column_width');\r\n      }\r\n    }\r\n    if (!this.state.elementDisplay) {\r\n      styles.display = \"none\";\r\n    }\r\n    let CSSId = this.props.element.getSettings(\"advanced_element_id\", \"\");\r\n    CSSId = replaceContentWithData(CSSId, this.props.element.getCurrentModel().getData());\r\n    if (this.CSSId !== CSSId) {\r\n      this.CSSId = CSSId;\r\n    }\r\n    let ContentComponent = frontElementsManager.getComponentClass(this.props.element.getName());\r\n    const content = React.createElement(ContentComponent, {\r\n      ref: this.elementRef,\r\n      rootElement: this.props.rootElement,\r\n      ElementWrapper: this.props.ElementWrapper,\r\n      element: this.props.element,\r\n      children: this.props.element.getChildren(),\r\n      match: this.props.match,\r\n      currentModel: this.props.currentModel,\r\n      currentUser: this.props.currentUser,\r\n      currentDataStorage: this.props.currentDataStorage,\r\n      altrpresponses: this.props.altrpresponses,\r\n      formsStore: this.props.formsStore,\r\n      elementDisplay: this.state.elementDisplay,\r\n      altrpPageState: this.props.altrpPageState,\r\n      altrpMeta: this.props.altrpMeta,\r\n      updateToken: this.state.updateToken,\r\n      currentScreen: this.props.currentScreen,\r\n      baseRender: this.props.baseRender,\r\n      history: this.props.history,\r\n      appStore\r\n    });\r\n    if (this.props.element.getTemplateType() === 'email') {\r\n      if (!this.state.elementDisplay) {\r\n        return null;\r\n      }\r\n      return <>\r\n        {content}\r\n      </>\r\n    }\r\n\r\n    let WrapperComponent = ElementWrapperDivComponent;\r\n\r\n    switch (this.props.element.getName()) {\r\n      case \"gallery\":\r\n        WrapperComponent = GalleryComponent;\r\n        break\r\n      case \"image\":\r\n        WrapperComponent = ImageComponent;\r\n        break\r\n      case \"button\":\r\n        WrapperComponent = ButtonComponent;\r\n        break\r\n      case \"text\":\r\n        WrapperComponent = TextComponent;\r\n        break;\r\n      case \"carousel\":\r\n        WrapperComponent = CarouselComponent;\r\n        break\r\n      case \"divider\":\r\n        WrapperComponent = DividerComponent;\r\n        break\r\n      case \"accordion\":\r\n        WrapperComponent = AccordionComponent;\r\n        break\r\n      case \"menu\":\r\n        WrapperComponent = MenuComponent;\r\n        break;\r\n      case \"breadcrumbs\":\r\n        WrapperComponent = BreadcrumbsComponent;\r\n        break;\r\n    }\r\n\r\n    return this.props.hideTriggers.includes(hide_on_trigger) ? null : (\r\n      <WrapperComponent\r\n        className={classes}\r\n        ref={this.elementWrapperRef}\r\n        elementId={this.props.element.getId()}\r\n        settings={this.props.element.getSettings()}\r\n        style={styles}\r\n        id={this.CSSId}\r\n      >\r\n        {content}\r\n        {tooltip_text && <AltrpTooltip position={tooltip_position}>{tooltip_text}</AltrpTooltip>}\r\n      </WrapperComponent>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    hideTriggers: state.hideTriggers,\r\n    altrpresponses: state.altrpresponses,\r\n    formsStore: state.formsStore,\r\n    currentDataStorage: state.currentDataStorage,\r\n    currentModel: state.currentModel,\r\n    currentUser: state.currentUser,\r\n    altrpMeta: state.altrpMeta,\r\n    altrpPageState: state.altrpPageState,\r\n    currentScreen: state.currentScreen,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, null, null, {\r\n  forwardRef: true\r\n})(withRouter(ElementWrapper));\r\n"],"sourceRoot":""}