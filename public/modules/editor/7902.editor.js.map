{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/HeaderCellComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/CellComponent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/Cell.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/Row.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/SubheadingRow.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableBodyContent.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/components/TableBody.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table-without-update.js"],"names":["styled","settings","column","table_transpose","column_cell_vertical_alignment","header_full_width","header_bg","table_style_main_width","getResponsiveSetting","table_style_other_width","styles","verticalAlign","verticalAlignToAlignItems","color","filteredRows","length","_","get","body_bg","cell","row","resize_columns","replace_rows","virtualized_rows","hide_expanded_row_icon","expanded_row_icon","hide_not_expanded_row_icon","not_expanded_row_icon","cellContent","render","id","index","isGrouped","getToggleRowExpandedProps","isExpanded","renderIcon","recurseCount","isAggregated","isPlaceholder","cellClassNames","push","cellProps","React","useMemo","getCellProps","style","cellStyles","original","mbParseJSON","assign","width","table_hover_row","join","column_body_alignment","textAlign","className","moveRow","visibleColumns","cardTemplate","dropRef","useRef","dragRef","fragmentProps","getRowProps","role","ExpandCard","row_expand","card_template","replace_text","replace_image","replace_width","template","frontElementsFabric","setCardModel","AltrpModel","createElement","componentClass","element","ElementWrapper","children","rowProps","ref","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","type","collect","isDragging","drag","opacity","preview","rowStyles","Fragment","url","src","cells","map","idx","key","colSpan","props","groupIndex","groupsStylesSettings","groupsSettings","transition","isArray","isObject","cell_alignment","padding","bg_color","typographic","stringStyles","size","dimensionsControllerToStyles","typographicControllerToStyles","cell_alignment_hover","padding_hover","color_hover","bg_color_hover","typographic_hover","TableBodyContent","prepareRow","rows","totalColumnsWidth","page","scrollBarSize","scrollbarWidth","virtualized_height","item_size","tables_settings_for_subheading","RenderRow","table_style_table_striple_style","itemCount","groups","isEmpty","leftValue","rightValue","columnName","name","indexOf","split","trim","value","forEach","columnValue","currentGroup","find","group","height","Number","itemSize","i","_props","dangerouslySetInnerHTML","__html","isStriped","contentProps","sortedColumns","sortedDirections","order","getTableBodyProps","includesSome","ids","filterValue","filter","some","rowValue","values","val","isString","includes","fuzzyTextFilterFn","undefined","matchSorter","keys","fullMatchTextFilterFn","partialMatchTextFilterFn","replace","AltrpTableWithoutUpdate","currentScreen","widgetId","data","query","_status","currentModel","widgetState","_error","setSortSettings","setFilterSettings","filterSetting","_latestData","DefaultCell","initialValue","updateData","setValue","column_template","column_is_editable","column_edit_url","column_external_link","column_blank_link","edit_disabled","column_cell_content_type","_accessor","substring","columnTemplate","setColumnTemplate","columnEditUrl","parseURLTemplate","templateLoader","linkTag","isEditor","Link","href","column_link","to","target","columnTemplateContent","AutoUpdateInput","route","resourceid","changevalue","onBlur","renderCellActions","sortSetting","stateRef","inner_page_size","global_filter","selected_storage","row_select","row_select_width","store_state","loading_text","row_select_all","hide_columns","ids_storage","hide_grouped_column_icon","grouped_column_icon","hide_not_grouped_column_icon","not_grouped_column_icon","checkbox_checked_icon","checkedIcon","checkbox_unchecked_icon","uncheckedIcon","checkbox_indeterminate_icon","indeterminateIcon","setCardTemplate","records","setRecords","filterTypes","fuzzyText","fullMatchText","partialMatchText","text","String","toLowerCase","startsWith","between","_ref","min","max","Infinity","temp","equals","defaultColumn","Filter","DefaultColumnFilter","Cell","columns","settingsToColumns","plugins","useFilters","useGlobalFilter","useGroupBy","useSortBy","useExpanded","usePagination","useRowSelect","useResizeColumns","useBlockLayout","hooks","column_width","column_name","getToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","IndeterminateCheckbox","icons","getToggleRowSelectedProps","skipPageReset","setSkipPageReset","rowIndex","columnId","old","getRowId","tableSettings","autoResetPage","initialState","pageSize","sortBy","desc","set","ReactTable","useTable","getTableProps","headerGroups","pageCount","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","getToggleHideAllColumnsProps","allColumns","preGlobalFilteredRows","setGlobalFilter","setPageSize","selectedFlatRows","reactTableState","state","pageIndex","globalFilter","groupBy","selectedRowIds","expanded","flatRows","field","_rows","r","subRows","concat","storeWidgetState","originalSelectedRows","selectedIds","isEqual","altrpHelpers","getDataByPath","setDataByPath","paginationProps","tableElement","getToggleHiddenProps","table","renderAdditionalRows","headerGroup","headerGroupProps","getHeaderGroupProps","headers","column_header_alignment","columnProps","getHeaderProps","getSortByToggleProps","resizerProps","getResizerProps","onClick","e","stopPropagation","columnNameContent","unset","canGroupBy","getGroupByToggleProps","isSorted","isSortedDesc","iconsManager","column_is_filtered","column_filter_type","isResizing","GlobalFilter","dragRecord","update","$splice","Pagination","preFilteredRows","setFilter","filter_placeholder","count","onChange","placeholder","SelectColumnFilter","options","_options","Set","add","option","label","AltrpSelect","isMulti","classNamePrefix","v","SliderColumnFilter","filter_button_text","Math","buttonText","parseInt","NumberRangeColumnFilter","filter_max_placeholder","filter_min_placeholder","minPlaceHolder","maxPlaceHolder","display","marginRight","marginLeft","tables_columns","columnOrder","_column","actions","accessor","column_text_filter_type","group_by","disableSortBy","column_is_sorted","aggregate","aggregateTemplate","aggregate_template","Aggregated","unshift","getToggleAllRowsExpandedProps","isAllRowsExpanded","canExpand","paddingLeft","depth","columnIndex","autoRemove","indeterminate","rest","defaultRef","resolvedRef","icon","checked","renderAssetIcon","global_filter_placeholder","global_filter_label","useAsyncDebounce","labelText","htmlFor","choose_datasource","Array","from","setAltrpIndex"],"mappings":"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","file":"7902.editor.js","sourcesContent":["import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\n\r\nconst TableComponent = styled.div``;\r\n\r\nexport default TableComponent;","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {verticalAlignToAlignItems} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst HeaderCellComponent = styled.div`${({settings, column})=>{\r\n  const {\r\n    table_transpose,\r\n  } = settings;\r\n  if(! table_transpose){\r\n    return ''\r\n  }\r\n  const {\r\n    column_cell_vertical_alignment, \r\n    header_full_width, \r\n    header_bg} = column;\r\n  const table_style_main_width = getResponsiveSetting(settings, 'table_style_main_width');\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  let styles = '&.altrp-table-th.altrp-table-cell{';\r\n  \r\n  let verticalAlign = getResponsiveSetting(settings, 'cell_vertical_alignment');\r\n  verticalAlign = verticalAlignToAlignItems(verticalAlign);\r\n  if (column_cell_vertical_alignment) {\r\n    verticalAlign = verticalAlignToAlignItems(column_cell_vertical_alignment);\r\n  }\r\n  if (verticalAlign) {\r\n    styles += `\r\n    display: flex;\r\n    align-items: ${verticalAlign};\r\n    > span{\r\n      display: block;\r\n      width: 100%;\r\n    }\r\n    `\r\n  }\r\n  if(header_bg){\r\n    styles += `background-color:${header_bg.color};`;\r\n  }\r\n  if(header_full_width){\r\n    styles += `\r\n      grid-column-start: 1;\r\n      grid-column-end: ${column.filteredRows.length + 2};\r\n      width: calc(${_.get(table_style_main_width, 'size') + (_.get(table_style_main_width, 'unit') || 'px')} + (${_.get(table_style_other_width, 'size') + (_.get(table_style_other_width, 'unit') || 'px')}) * ${column.filteredRows.length})\r\n    `;\r\n  } else {\r\n  }\r\n  \r\n  styles += `\r\n      width: ${_.get(table_style_main_width, 'size') + (_.get(table_style_main_width, 'unit') || 'px')}\r\n    `;    \r\n  \r\n  styles += `}`;\r\n  return styles;\r\n}}`;\r\n\r\nexport default HeaderCellComponent;","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {verticalAlignToAlignItems} from \"../../../../../../front-app/src/js/helpers/styles\";\r\n\r\nconst CellComponent = styled.div`${({settings, column})=>{\r\n  const {\r\n    table_transpose,\r\n  } = settings;\r\n  if(! table_transpose){\r\n    return ''\r\n  }\r\n  const {\r\n    column_cell_vertical_alignment,\r\n    body_bg, \r\n    header_full_width} = column;\r\n  const table_style_other_width = getResponsiveSetting(settings, 'table_style_other_width');\r\n  let verticalAlign = getResponsiveSetting(settings, 'cell_vertical_alignment');\r\n  verticalAlign = verticalAlignToAlignItems(verticalAlign);\r\n  if(column_cell_vertical_alignment){\r\n    verticalAlign = verticalAlignToAlignItems(column_cell_vertical_alignment);\r\n  }\r\n  let styles = '&.altrp-table-td.altrp-table-cell{';\r\n  if(verticalAlign){\r\n    styles += `\r\n    display: flex;\r\n    align-items: ${verticalAlign};\r\n    .altrp-table-td__default-content{\r\n      display: block;\r\n      width: 100%;\r\n    }\r\n    `\r\n  }\r\n  if(header_full_width){\r\n    return `&.altrp-table-td{display:none;}`\r\n  }\r\n  if(body_bg){\r\n    styles +=`background-color:${body_bg.color};`;\r\n  }\r\n  styles += `\r\n  width: ${_.get(table_style_other_width, 'size') + (_.get(table_style_other_width, 'unit') || 'px')};\r\n  `;\r\n  styles += `}`;\r\n  return styles;\r\n}}`;\r\n\r\nexport default CellComponent;","import {mbParseJSON, recurseCount, renderIcon} from \"../../../../../../front-app/src/js/helpers\";\r\nimport CellComponent from './CellComponent';\r\n/**\r\n * Ячейка\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst Cell = ({ cell, settings }) => {\r\n  const { row, column } = cell;\r\n  const {\r\n    resize_columns,\r\n    replace_rows,\r\n    virtualized_rows,\r\n    hide_expanded_row_icon,\r\n    expanded_row_icon,\r\n    hide_not_expanded_row_icon,\r\n    not_expanded_row_icon\r\n  } = settings;\r\n  let cellContent = cell.render('Cell');\r\n  if (cell.column.id === '##') {\r\n    cellContent = cell.row.index + 1;\r\n  }\r\n  if (cell.isGrouped) {\r\n    cellContent = (\r\n        <>\r\n          <span {...row.getToggleRowExpandedProps()}>\r\n          {row.isExpanded ?\r\n              renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n              renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n        </span>{' '}\r\n               {cell.render('Cell')} ({recurseCount(row, 'subRows')})\r\n        </>\r\n    );\r\n  } else if (cell.isAggregated) {\r\n    cellContent = cell.render('Aggregated');\r\n  } else if (cell.isPlaceholder) {\r\n    cellContent = cell.render('Cell');\r\n  }\r\n  const cellClassNames = ['altrp-table-td', 'altrp-table-cell'];\r\n  cell.isAggregated && cellClassNames.push('altrp-table-td_aggregated');\r\n  cell.isPlaceholder && cellClassNames.push('altrp-table-td_placeholder');\r\n  cell.isGrouped && cellClassNames.push('altrp-table-td_grouped');\r\n\r\n  let cellProps = React.useMemo(() => {\r\n    let cellProps = cell.getCellProps();\r\n    if (!resize_columns && !virtualized_rows) {\r\n      delete cellProps.style;\r\n    }\r\n    if (_.get(cell, 'column.column_styles_field')) {\r\n\r\n      let cellStyles = _.get(cell, 'column.column_styles_field');\r\n      cellStyles = _.get(row.original, cellStyles, '');\r\n      cellStyles = mbParseJSON(cellStyles, {});\r\n      cellProps.style = _.assign({...cellStyles}, cellProps.style);\r\n    }\r\n    // if(replace_rows){\r\n    //   cellProps.ref = dropRef;\r\n    // }\r\n\r\n    return cellProps;\r\n  }, [resize_columns,\r\n    replace_rows,\r\n    virtualized_rows,\r\n    cell.getCellProps().style.width,\r\n    _.get(cell, 'column.column_styles_field')]);\r\n\r\n  /**\r\n   * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n   */\r\n  if (!settings.table_hover_row) {\r\n    cellClassNames.join('altrp-table-background');\r\n  }\r\n  // if (!column.column_body_alignment) {\r\n  //   cellClassNames.join( `altrp-table-td_alignment-${column.column_body_alignment}`);\r\n  // }\r\n  let style = cell.column.column_body_alignment ? { textAlign: cell.column.column_body_alignment } : {};\r\n  style = _.assign(style, cellProps.style || {});\r\n  if (cell.column.column_cell_vertical_alignment && cell.column.column_cell_vertical_alignment !== 'inherit') {\r\n    style.verticalAlign = cell.column.column_cell_vertical_alignment;\r\n  }\r\n\r\n  return <CellComponent {...cellProps}\r\n                        settings={settings}\r\n                        column={column}\r\n                        style={style}\r\n                        className={cellClassNames.join(' ')}>{cellContent}</CellComponent>\r\n};\r\n\r\nexport default Cell;","import { useDrag, useDrop } from 'react-dnd'\r\nimport AltrpModel from \"../../../classes/AltrpModel\";\r\nimport ElementWrapper from \"../../../../../../front-app/src/js/components/ElementWrapper\";\r\nimport {mbParseJSON, recurseCount, renderIcon} from \"../../../../../../front-app/src/js/helpers\";\r\nimport frontElementsFabric from \"../../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\nimport Cell from './Cell';\r\n\r\nconst DND_ITEM_TYPE = 'row';\r\n\r\n/**\r\n * Компонент строки\r\n * @param {{}} row\r\n * @param {number} index\r\n * @param {function} moveRow\r\n * @param {{}} settings\r\n * @param {{}} style\r\n * @param {{}} cardTemplate\r\n * @param {[]} visibleColumns\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst Row = ({ row,\r\n               index,\r\n               moveRow,\r\n               style,\r\n               visibleColumns,\r\n               cardTemplate,\r\n               settings }) => {\r\n  const dropRef = React.useRef(null);\r\n  const dragRef = React.useRef(null);\r\n  const fragmentProps = { ...row.getRowProps() };\r\n  delete fragmentProps.role;\r\n  delete fragmentProps.style;\r\n  let ExpandCard = null;\r\n  const {\r\n    resize_columns,\r\n    replace_rows,\r\n    row_expand,\r\n    virtualized_rows,\r\n    card_template,\r\n    replace_text,\r\n    replace_image,\r\n    replace_width,\r\n  } = settings;\r\n  if (cardTemplate) {\r\n    let template = frontElementsFabric.cloneElement(cardTemplate);\r\n    template.setCardModel(new AltrpModel(row.original || {}));\r\n    ExpandCard = React.createElement(template.componentClass,\r\n        {\r\n          element: template,\r\n          ElementWrapper: ElementWrapper,\r\n          children: template.children\r\n        });\r\n  }\r\n\r\n  let rowProps = React.useMemo(() => {\r\n    let rowProps = row.getRowProps();\r\n    if ((!resize_columns) && !virtualized_rows) {\r\n      delete rowProps.style;\r\n      style = {};\r\n    }\r\n    if (replace_rows) {\r\n      rowProps.ref = dropRef;\r\n    }\r\n    return rowProps;\r\n  }, [resize_columns, replace_rows, virtualized_rows]);\r\n  const [, drop] = useDrop({\r\n    accept: DND_ITEM_TYPE,\r\n    hover(item, monitor) {\r\n      if (!dropRef.current) {\r\n        return\r\n      }\r\n      const dragIndex = item.index;\r\n      const hoverIndex = index;\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect();\r\n      // Get vertical middle\r\n      const hoverMiddleY =\r\n          (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset();\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return\r\n      }\r\n      // Time to actually perform the action\r\n      moveRow(dragIndex, hoverIndex);\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex\r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag, preview] = useDrag({\r\n    item: { type: DND_ITEM_TYPE, index },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging ? 0 : 1;\r\n\r\n  preview(drop(dropRef));\r\n  drag(dragRef);\r\n\r\n  // return (\r\n  //     <tr ref={dropRef} style={{ opacity }}>\r\n  //       <td ref={dragRef}>move</td>\r\n  //       {row.cells.map(cell => {\r\n  //         return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n  //       })}\r\n  //     </tr>\r\n  // );\r\n  const rowStyles = React.useMemo(() => {\r\n    if (! resize_columns && ! virtualized_rows) {\r\n      return {};\r\n    }\r\n    return style;\r\n  }, [resize_columns, virtualized_rows, row.getRowProps().style.width]);\r\n  return (\r\n      <React.Fragment {...fragmentProps}>\r\n\r\n        <div {...rowProps} className={`altrp-table-tr ${isDragging ? 'altrp-table-tr__dragging' : ''}`} style={{ ...rowStyles, opacity }}>\r\n          {replace_rows && <div className=\"altrp-table-td replace-text\" ref={dragRef} style={{ width: replace_width }}>\r\n            {replace_text}\r\n            {replace_image && replace_image.url && <img src={replace_image.url} className=\"replace-picture\" />}\r\n          </div>}\r\n\r\n          {row.cells.map((cell, idx) => {\r\n            return <Cell cell={cell} key={idx} settings={settings} />;\r\n            let cellContent = cell.render('Cell');\r\n            if (cell.column.id === '##') {\r\n              cellContent = cell.row.index + 1;\r\n            }\r\n            const { column } = cell;\r\n            if (cell.isGrouped) {\r\n              cellContent = (\r\n                  <>\r\n                    <span {...row.getToggleRowExpandedProps()}>\r\n                  {row.isExpanded ?\r\n                      renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n                      renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n                </span>{' '}\r\n                       {cell.render('Cell')} ({recurseCount(row, 'subRows')})\r\n                  </>\r\n              );\r\n            } else if (cell.isAggregated) {\r\n              cellContent = cell.render('Aggregated');\r\n            } else if (cell.isPlaceholder) {\r\n              cellContent = cell.render('Cell');\r\n            }\r\n            const cellClassNames = ['altrp-table-td'];\r\n            cell.isAggregated && cellClassNames.push('altrp-table-td_aggregated');\r\n            cell.isPlaceholder && cellClassNames.push('altrp-table-td_placeholder');\r\n            cell.isGrouped && cellClassNames.push('altrp-table-td_grouped');\r\n\r\n            let cellProps = React.useMemo(() => {\r\n              let cellProps = cell.getCellProps();\r\n              if (!resize_columns && !virtualized_rows) {\r\n                delete cellProps.style;\r\n              }\r\n              if (_.get(cell, 'column.column_styles_field')) {\r\n\r\n                let cellStyles = _.get(cell, 'column.column_styles_field');\r\n                cellStyles = _.get(row.original, cellStyles, '');\r\n                cellStyles = mbParseJSON(cellStyles, {});\r\n                cellProps.style = _.assign({...cellStyles}, cellProps.style);\r\n              }\r\n              if (replace_rows) {\r\n                cellProps.ref = dropRef;\r\n              }\r\n\r\n              return cellProps;\r\n            }, [resize_columns, replace_rows, virtualized_rows,\r\n              cell.getCellProps().style.width,\r\n              _.get(cell, 'column.column_styles_field')]);\r\n\r\n            /**\r\n             * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n             */\r\n            if (!settings.table_hover_row) {\r\n              cellClassNames.join('altrp-table-background');\r\n            }\r\n            if (!column.column_body_alignment) {\r\n              cellClassNames.join(`altrp-table-td_alignment-${column.column_body_alignment}`);\r\n            }\r\n            return <div {...cellProps} className={cellClassNames.join(' ')}>{cellContent}</div>\r\n          })}\r\n        </div>\r\n        {row.isExpanded && row_expand && card_template && cardTemplate &&\r\n        <div className=\"altrp-table-tr altrp-posts\">\r\n          <td colSpan={visibleColumns.length + replace_rows} className=\"altrp-table-td altrp-post\">{ExpandCard}</td>\r\n        </div>\r\n        }\r\n      </React.Fragment>);\r\n};\r\n\r\nexport default Row;","import styled from 'styled-components';\r\nimport {getResponsiveSetting} from \"../../../../../../front-app/src/js/helpers\";\r\nimport {\r\n  dimensionsControllerToStyles,\r\n  typographicControllerToStyles\r\n} from \"../../../../../../front-app/src/js/helpers/styles\";\r\nconst SubheadingRow = styled.div`\r\n${\r\n  (props)=>{\r\n    const {settings, groupIndex} = props;\r\n    const groupsStylesSettings = getResponsiveSetting(settings, 'tables_groups');\r\n    const groupsSettings = getResponsiveSetting(settings, 'tables_settings_for_subheading');\r\n    const {transition} = _.get(groupsSettings, groupIndex - 1, {});\r\n    if(! _.isArray(groupsStylesSettings) || ! groupIndex){\r\n      return '';\r\n    }\r\n    let styles;\r\n    if(groupIndex > groupsStylesSettings.length){\r\n      styles = groupsStylesSettings[groupsStylesSettings.length - 1];\r\n    } else {\r\n      styles = groupsStylesSettings[groupIndex - 1];\r\n    }\r\n    if(! styles){\r\n      return '';\r\n    }\r\n    if(! _.isObject(styles)){\r\n      return '';\r\n    }\r\n    const {\r\n      cell_alignment, \r\n      padding,\r\n      color,\r\n      bg_color,\r\n      typographic,\r\n    } = styles;\r\n    let stringStyles =  `&.altrp-table-tr .altrp-table-td{`;\r\n    if(transition?.size){\r\n      stringStyles += `transition-duration: ${transition.size}s;`;\r\n    }\r\n    if(_.isObject(padding)){\r\n      stringStyles += dimensionsControllerToStyles(padding)\r\n    }\r\n    if(_.isObject(typographic)){\r\n      stringStyles += typographicControllerToStyles(typographic)\r\n    }\r\n    if(cell_alignment){\r\n      stringStyles += `text-align: ${cell_alignment};`;\r\n    }\r\n    if(color?.color){\r\n      stringStyles += `color: ${color.color};`;\r\n    }\r\n    if(bg_color?.color){\r\n      stringStyles += `background-color: ${bg_color.color};`;\r\n    }\r\n    \r\n    stringStyles += `}&.altrp-table-tr .altrp-table-td:hover{`;\r\n    \r\n    const cell_alignment_hover = styles['cell_alignment_:hover_'];\r\n    const padding_hover = styles['padding_:hover_'];\r\n    const color_hover = styles['color_:hover_'];\r\n    const bg_color_hover = styles['bg_color_:hover_'];\r\n    const typographic_hover = styles['typographic_:hover_'];\r\n\r\n    if(_.isObject(padding_hover)){\r\n      stringStyles += dimensionsControllerToStyles(padding_hover)\r\n    }\r\n    if(_.isObject(typographic_hover)){\r\n      stringStyles += typographicControllerToStyles(typographic_hover)\r\n    }\r\n    if(cell_alignment_hover){\r\n      stringStyles += `text-align: ${cell_alignment_hover};`;\r\n    }\r\n    if(color_hover?.color){\r\n      stringStyles += `color: ${color_hover.color};`;\r\n    }\r\n    if(bg_color_hover?.color){\r\n      stringStyles += `background-color: ${bg_color_hover.color};`;\r\n    }\r\n    stringStyles += `}`;\r\n    return stringStyles;\r\n  }\r\n}`;\r\n\r\nexport default SubheadingRow","import React from \"react\";\r\nimport {FixedSizeList} from \"react-window\";\r\nimport {scrollbarWidth} from \"../../../../../../front-app/src/js/helpers\";\r\nimport Row from './Row';\r\nimport SubheadingRow from \"./SubheadingRow\";\r\n\r\nconst TableBodyContent =\r\n    (props) => {\r\n      const {\r\n        prepareRow,\r\n        rows,\r\n        visibleColumns,\r\n        totalColumnsWidth,\r\n        moveRow,\r\n        settings,\r\n        cardTemplate,\r\n        groupIndex,\r\n        page,\r\n      } = props;\r\n      const scrollBarSize = React.useMemo(() => scrollbarWidth(), []);\r\n      const {\r\n        virtualized_rows,\r\n        virtualized_height,\r\n        item_size,\r\n        tables_settings_for_subheading,\r\n        table_style_table_striple_style: isStriped\r\n      } = settings;\r\n      const RenderRow = React.useCallback(\r\n          ({index, style}) => {\r\n            const row = page ? page[index] : rows[index];\r\n            prepareRow(row);\r\n            return <Row\r\n                index={index}\r\n                row={row}\r\n                visibleColumns={visibleColumns}\r\n                moveRow={moveRow}\r\n                settings={settings}\r\n                cardTemplate={cardTemplate}\r\n                {...row.getRowProps({style})}\r\n            />;\r\n\r\n          }, [page,\r\n            rows,\r\n            visibleColumns,\r\n            settings,\r\n            cardTemplate,\r\n            moveRow,\r\n            prepareRow,]);\r\n      const itemCount = React.useMemo(() => page ? page.length : rows.length, [page, rows]);\r\n      const groups = React.useMemo(() => {\r\n        if (_.isEmpty(tables_settings_for_subheading)) {\r\n          return null;\r\n        }\r\n        let columnName = tables_settings_for_subheading[groupIndex]?.name;\r\n        if (! columnName) {\r\n          return null;\r\n        }\r\n\r\n        let leftValue, rightValue;\r\n        if(columnName.indexOf('?') !== -1 && columnName.indexOf(':') !== -1){\r\n          [leftValue, rightValue] = columnName.split('?')[1].split(':');\r\n          leftValue = leftValue.trim();\r\n          rightValue = rightValue.trim();\r\n          cell.value = cell.value ? leftValue : rightValue;\r\n          columnName = columnName.split('?')[0].trim();\r\n        }\r\n\r\n        let _rows = page ? page : rows;\r\n        const groups = [];\r\n        _rows.forEach(row => {\r\n          let currentGroup = groups.find(group => {\r\n            return group.columnValue === row.original[columnName];\r\n          });\r\n          let columnValue;\r\n          if(leftValue || rightValue){\r\n            columnValue = row.original[columnName] ? leftValue : rightValue;\r\n          } else {\r\n            columnValue = row.original[columnName];\r\n          }\r\n          if (! currentGroup) {\r\n            currentGroup = {\r\n              columnValue,\r\n              rows: [],\r\n            };\r\n            groups.push(currentGroup);\r\n          }\r\n          currentGroup.rows.push(row);\r\n        });\r\n        return groups;\r\n      }, [tables_settings_for_subheading, page, rows]);\r\n      if (! _.isEmpty(groups)) {\r\n        return groups.map((group, idx) => {\r\n          const _props = {...props};\r\n          _props.page = group.rows;\r\n          _props.rows = group.rows;\r\n          _props.groupIndex = groupIndex + 1;\r\n          _props.key = group.columnValue + idx;\r\n          return <React.Fragment key={_props.key}>\r\n            <SubheadingRow className=\"altrp-table-tr altrp-table-tr_group-subheading\"\r\n                           groupIndex={_props.groupIndex}\r\n                           settings={settings}>\r\n              <td colSpan={visibleColumns.length || 1}\r\n                  className=\"altrp-table-td\"\r\n                  dangerouslySetInnerHTML={{__html: group.columnValue === 0 ? '0' : (group.columnValue || '&nbsp;')}}/>\r\n            </SubheadingRow>\r\n            <TableBodyContent {..._props}/>\r\n          </React.Fragment>\r\n        })\r\n\r\n      }\r\n      if (virtualized_rows) {\r\n        return <React.Fragment>\r\n          <FixedSizeList height={Number(virtualized_height) || 0}\r\n                         itemCount={itemCount}\r\n                         itemSize={Number(item_size) || 0}\r\n                         width={totalColumnsWidth + scrollBarSize}\r\n          >\r\n            {RenderRow}\r\n          </FixedSizeList>\r\n        </React.Fragment>\r\n      }\r\n      return <React.Fragment>\r\n        {(page ? page : rows).map((row, i) => {\r\n          prepareRow(row);\r\n          return <Row\r\n              index={i}\r\n              row={row}\r\n              visibleColumns={visibleColumns}\r\n              moveRow={moveRow}\r\n              settings={settings}\r\n              cardTemplate={cardTemplate}\r\n              {...row.getRowProps()}\r\n          />;\r\n        })}\r\n\r\n      </React.Fragment>\r\n    };\r\n\r\nexport default TableBodyContent;\r\n\r\n","import TableBodyContent from \"./TableBodyContent\";\r\nimport React from \"react\";\r\n\r\nconst TableBody =\r\n    (props) => {\r\n      const {\r\n        tables_settings_for_subheading,\r\n        table_style_table_striple_style: isStriped,\r\n\r\n      } = props.settings;\r\n      const contentProps = {...props};\r\n      contentProps.rows = React.useMemo(() => {\r\n        if (_.isEmpty(tables_settings_for_subheading)) {\r\n          return props.rows;\r\n        }\r\n        const sortedColumns = [];\r\n        const sortedDirections = [];\r\n        tables_settings_for_subheading.forEach(item=>{\r\n          if(item.name){\r\n            sortedColumns.push(item.name);\r\n            sortedDirections.push(item.order || 'asc')\r\n          }\r\n        });\r\n      }, [tables_settings_for_subheading]);\r\n      contentProps.groupIndex = 0;\r\n\r\n      return <div {...props.getTableBodyProps()}\r\n                  className={`altrp-table-tbody ${isStriped ? \"altrp-table-tbody--striped\" : \"\"}`}>\r\n        <TableBodyContent {...contentProps}/>\r\n      </div>\r\n    };\r\n\r\nexport default TableBody;","import ('../altrp-posts/altrp-posts.scss');\r\nimport update from 'immutability-helper'\r\nimport ('../../../sass/altrp-pagination.scss');\r\nimport {\r\n  setDataByPath,\r\n  storeWidgetState,\r\n  isEditor, parseURLTemplate,\r\n  renderAssetIcon,\r\n  generateButtonsArray,\r\n  renderIcon, setAltrpIndex, getResponsiveSetting\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { renderAdditionalRows, renderCellActions, } from \"./altrp-table\";\r\nimport {\r\n  useSortBy,\r\n  useTable,\r\n  usePagination,\r\n  useFilters,\r\n  useGroupBy,\r\n  useGlobalFilter,\r\n  useExpanded,\r\n  useRowSelect,\r\n  useResizeColumns,\r\n  useBlockLayout,\r\n  useAsyncDebounce,\r\n} from \"react-table\";\r\nimport AltrpQueryComponent from \"../altrp-query-component/altrp-query-component\";\r\nimport AltrpSelect from \"../../../../../admin/src/components/altrp-select/AltrpSelect\";\r\nimport { iconsManager } from \"../../../../../admin/src/js/helpers\";\r\nimport { matchSorter } from 'match-sorter'\r\nimport React from \"react\";\r\nimport templateLoader from \"../../classes/modules/TemplateLoader\";\r\nimport frontElementsFabric from \"../../../../../front-app/src/js/classes/FrontElementsFabric\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nimport ElementWrapper from \"../../../../../front-app/src/js/components/ElementWrapper\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\nimport TableComponent from \"./components/TableComponent\";\r\nimport HeaderCellComponent from \"./components/HeaderCellComponent\";\r\nimport TableBody from './components/TableBody';\r\nimport Pagination from \"./components/Pagination\";\r\n\r\n/**\r\n *\r\n * @param rows\r\n * @param ids\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction includesSome(rows, ids, filterValue) {\r\n  return rows.filter(function (row) {\r\n    return ids.some(function (id) {\r\n      let rowValue = row.values[id];\r\n      return filterValue.some(function (val) {\r\n        if (!(val || rowValue)) {\r\n          return true;\r\n        }\r\n        if (!_.isString(rowValue)) {\r\n          rowValue += '';\r\n        }\r\n        return rowValue.includes(val);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nincludesSome.autoRemove = function (val) {\r\n  return !val || !val.length;\r\n};\r\n\r\n/**\r\n * Фильтрация нечеткого текста\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return matchSorter(rows, filterValue, {\r\n    keys: [row => {\r\n      let rowValue = row.values[id];\r\n      if (id === '##') {\r\n        rowValue = row.index + 1;\r\n      }\r\n      return rowValue\r\n    }]\r\n  })\r\n}\r\nfuzzyTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Фильтрация на точное соответствие\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction fullMatchTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return rows.filter(row => _.get(row, `values.${id}`) === filterValue);\r\n}\r\nfullMatchTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Фильтрация на нахождение в тексте\r\n * @param rows\r\n * @param id\r\n * @param filterValue\r\n * @return {*}\r\n */\r\nfunction partialMatchTextFilterFn(rows, id, filterValue) {\r\n  id = id ? id[0] : undefined;\r\n  return rows.filter(row => {\r\n    filterValue = filterValue.replace(/\\s/g, '');\r\n    let value = _.get(row, `values.${id}`, '').replace(/\\s/g, '');\r\n    return value.indexOf(filterValue) !== -1\r\n  });\r\n}\r\npartialMatchTextFilterFn.autoRemove = val => ! val;\r\n/**\r\n * Компонент, который работает только с внешними данными, которые не обновляются с сервера\r\n * @param {{}} settings\r\n * @param {string} widgetId\r\n * @param {Query} query\r\n * @param {{}} data\r\n * @param {AltrpModel} currentModel\r\n * @param {string} _status\r\n * @param {{}} _error\r\n * @param {function} setSortSettings\r\n * @param {function} setFilterSettings\r\n * @param {function} setPage\r\n * @param {{}} filterSetting\r\n * @param {{}} sortSetting\r\n * @param {[]} _latestData\r\n * @param {{}} widgetState\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction AltrpTableWithoutUpdate(\r\n  {\r\n    settings,\r\n    currentScreen,\r\n    widgetId,\r\n    query,\r\n    data,\r\n    currentModel,\r\n    _status,\r\n    _error,\r\n    setSortSettings,\r\n    setFilterSettings,\r\n    filterSetting,\r\n    _latestData,\r\n    widgetState,\r\n    sortSetting\r\n  }) {\r\n\r\n  function DefaultCell(\r\n    { row,\r\n      data,\r\n      cell, value: initialValue,\r\n      updateData }) {\r\n    const { column } = cell;\r\n    const [value, setValue] = React.useState(initialValue);\r\n    React.useEffect(() => {\r\n      setValue(initialValue);\r\n    }, [initialValue, cell]);\r\n    const { column_template,\r\n      column_is_editable,\r\n      column_edit_url,\r\n      column_external_link,\r\n      column_blank_link,\r\n      edit_disabled,\r\n      column_cell_content_type } = column;\r\n    let {\r\n      _accessor,\r\n    } = column;\r\n    _accessor = _accessor || '';\r\n    _accessor = _accessor.trim();\r\n    let leftValue, rightValue;\r\n    if(_accessor && _accessor.indexOf('?') !== -1 && _accessor.indexOf(':') !== -1){\r\n      [leftValue, rightValue] = _accessor.split('?')[1].split(':');\r\n      leftValue = leftValue.trim();\r\n      rightValue = rightValue.trim();\r\n      cell.value = cell.value ? leftValue : rightValue;\r\n    }\r\n    if(_accessor.indexOf('\"') === 0 && _accessor[_accessor.length - 1] === '\"'){\r\n      cell.value = _accessor.substring(1, _accessor.length - 1);\r\n    }\r\n    const [columnTemplate, setColumnTemplate] = React.useState(null);\r\n    const columnEditUrl =\r\n      React.useMemo(() => {\r\n        if (!column_is_editable || !column_edit_url) {\r\n          return null;\r\n        }\r\n        return parseURLTemplate(column_edit_url, row.original);\r\n      }, [column_edit_url, column_is_editable, row, ]);\r\n\r\n    React.useEffect(() => {\r\n      if (column_template) {\r\n        (async () => {\r\n          const columnTemplate = await templateLoader.loadParsedTemplate(column_template);\r\n          setColumnTemplate(columnTemplate);\r\n        })();\r\n      }\r\n    }, [column_template]);\r\n    let cellContent = cell.value;\r\n    let linkTag = isEditor() ? 'a' : Link;\r\n    if(column_external_link && ! isEditor()) {\r\n      linkTag = 'a';\r\n    }\r\n    /**\r\n     * Если значение объект или массив, то отобразим пустую строку\r\n     */\r\n    if (_.isObject(cell.value)) {\r\n      cellContent = '';\r\n    }\r\n    /**\r\n     * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n     */\r\n    let href = null;\r\n    switch (column_cell_content_type) {\r\n      case 'email':\r\n        cellContent = React.createElement('a', {\r\n          href: `mailto:${cell.value}`,\r\n          className: 'altrp-inherit altrp-table-td__default-content',\r\n          dangerouslySetInnerHTML: {\r\n            __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n          }\r\n        });\r\n        break;\r\n\r\n      case 'phone':\r\n        cellContent = React.createElement('a', {\r\n          href: `tel:${cell.value}`,\r\n          className: 'altrp-inherit altrp-table-td__default-content',\r\n          dangerouslySetInnerHTML: {\r\n            __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n          }\r\n        });\r\n        break;\r\n\r\n      default:\r\n        if (column.column_link) {\r\n          cellContent = React.createElement(linkTag, {\r\n            to: parseURLTemplate(column.column_link, row.original),\r\n            href: parseURLTemplate(column.column_link, row.original),\r\n            target: column_blank_link ? '_blank' : '',\r\n            className: 'altrp-inherit altrp-table-td__default-content',\r\n            dangerouslySetInnerHTML: {\r\n              __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n            }\r\n          })\r\n        } else {\r\n          cellContent = React.createElement('span', {\r\n            href,\r\n            className: 'altrp-inherit altrp-table-td__default-content',\r\n            dangerouslySetInnerHTML: {\r\n              __html: cell.value === 0 ? '0' : (cell.value || '&nbsp;')\r\n            }\r\n          })\r\n        }\r\n        break;\r\n    }\r\n\r\n    const columnTemplateContent = React.useMemo(() => {\r\n      if (! columnTemplate) {\r\n        return null;\r\n      }\r\n      let columnTemplateContent = frontElementsFabric.cloneElement(columnTemplate);\r\n      columnTemplateContent.setCardModel(new AltrpModel(row.original || {}),);\r\n      return React.createElement(columnTemplateContent.componentClass,\r\n        {\r\n          element: columnTemplateContent,\r\n          ElementWrapper: ElementWrapper,\r\n          children: columnTemplateContent.children\r\n        });\r\n    }, [columnTemplate, row.original, data]);\r\n    if (columnTemplateContent) {\r\n      return <div className=\"altrp-posts\"><div className=\"altrp-post overflow-visible\">{columnTemplateContent}</div></div>;\r\n    }\r\n\r\n    /**\r\n     * Отоборажаем инпут для редактирования данных\r\n     */\r\n    if (columnEditUrl && ! edit_disabled) {\r\n      return <AutoUpdateInput className=\"altrp-inherit\"\r\n        route={columnEditUrl}\r\n        resourceid={''}\r\n        changevalue={value => {\r\n          setValue(value)\r\n        }}\r\n        onBlur={(value) => {\r\n          updateData(row.index, _accessor, value);\r\n        }}\r\n        value={value} />;\r\n    }\r\n    /**\r\n     * Если есть actions, то надо их вывести\r\n     */\r\n    if (_.get(cell, 'column.actions.length')) {\r\n      return renderCellActions(cell, row);\r\n    }\r\n    if (_.isString(cellContent)) {\r\n      return cellContent;\r\n    }\r\n    return <>{cellContent}</>;\r\n\r\n  }\r\n  const stateRef = React.useRef(widgetState);\r\n  const { inner_page_size,\r\n    global_filter,\r\n    card_template,\r\n    row_expand,\r\n    selected_storage,\r\n    row_select,\r\n    row_select_width,\r\n    store_state,\r\n    loading_text,\r\n    row_select_all,\r\n    hide_columns,\r\n    resize_columns,\r\n    table_transpose,\r\n    virtualized_rows,\r\n    replace_rows,\r\n    tables_settings_for_subheading,\r\n    replace_width,\r\n    ids_storage,\r\n    hide_grouped_column_icon,\r\n    grouped_column_icon,\r\n    hide_not_grouped_column_icon,\r\n    not_grouped_column_icon,\r\n    checkbox_checked_icon: checkedIcon = {},\r\n    checkbox_unchecked_icon: uncheckedIcon = {},\r\n    checkbox_indeterminate_icon: indeterminateIcon = {} } = settings;\r\n  const [cardTemplate, setCardTemplate] = React.useState(null);\r\n  /**\r\n   * Для перетаскивания\r\n   */\r\n  const [records, setRecords] = React.useState(data);\r\n  React.useEffect(() => {\r\n    setRecords(data);\r\n  }, [data]);\r\n  const moveRow = (dragIndex, hoverIndex) => {\r\n    const dragRecord = records[dragIndex];\r\n    setRecords(\r\n      update(records, {\r\n        $splice: [\r\n          [dragIndex, 1],\r\n          [hoverIndex, 0, dragRecord],\r\n        ],\r\n      })\r\n    )\r\n  };\r\n\r\n  const filterTypes = React.useMemo(\r\n    () => ({\r\n      // Add a new fuzzyTextFilterFn filter type.\r\n      fuzzyText: fuzzyTextFilterFn,\r\n      fullMatchText: fullMatchTextFilterFn,\r\n      partialMatchText: partialMatchTextFilterFn,\r\n      // Or, override the default text filter to use\r\n      // \"startWith\"\r\n      text: (rows, id, filterValue) => {\r\n        id = id ? id[0] : undefined;\r\n        return rows.filter(row => {\r\n          let rowValue = row.values[id];\r\n          if (id === '##') {\r\n            rowValue = row.index + 1;\r\n          }\r\n          return rowValue !== undefined\r\n            ? String(rowValue)\r\n              .toLowerCase()\r\n              .startsWith(String(filterValue).toLowerCase())\r\n            : true\r\n        })\r\n      },\r\n      between: (rows, ids, filterValue) => {\r\n        let _ref = filterValue || [],\r\n          min = _ref[0],\r\n          max = _ref[1];\r\n        min = typeof min === 'number' ? min : -Infinity;\r\n        max = typeof max === 'number' ? max : Infinity;\r\n\r\n        if (min > max) {\r\n          let temp = min;\r\n          min = max;\r\n          max = temp;\r\n        }\r\n\r\n        return rows.filter(function (row) {\r\n          return ids.some(function (id) {\r\n            let rowValue = row.values[id];\r\n            if (id === '##') {\r\n              rowValue = row.index + 1;\r\n            }\r\n            return rowValue >= min && rowValue <= max;\r\n          });\r\n        });\r\n      },\r\n      equals: (rows, ids, filterValue) => {\r\n        return rows.filter(function (row) {\r\n          return ids.some(function (id) {\r\n            let rowValue = row.values[id];\r\n            if (id === '##') {\r\n              rowValue = row.index + 1;\r\n            }\r\n            return rowValue == filterValue;\r\n          });\r\n        });\r\n      },\r\n      includesSome: includesSome,\r\n    }),\r\n    []\r\n  );\r\n  const defaultColumn = React.useMemo(\r\n    () => ({\r\n      Filter: DefaultColumnFilter,\r\n      width: 150,\r\n      Cell: DefaultCell,\r\n    }),\r\n    []\r\n  );\r\n  React.useEffect(() => {\r\n    if (!data) {\r\n      data = [];\r\n      return;\r\n    }\r\n    if (!_.isArray(data)) {\r\n      data = [data];\r\n    }\r\n  }, [data]);\r\n  let columns = React.useMemo(() => settingsToColumns(settings, widgetId), [settings, widgetId]);\r\n  /**\r\n   * Сохраним шаблон для выпадашки\r\n   */\r\n  React.useEffect(() => {\r\n    if (card_template && row_expand) {\r\n      (async () => {\r\n        const template = await templateLoader.loadParsedTemplate(card_template);\r\n        setCardTemplate(template);\r\n      })()\r\n    }\r\n  }, [row_expand, card_template]);\r\n  const plugins = [useFilters,\r\n    useGlobalFilter,\r\n    useGroupBy,\r\n    useSortBy,\r\n    useExpanded,\r\n    usePagination,\r\n    useRowSelect,\r\n    useResizeColumns,\r\n    useBlockLayout,\r\n  ];\r\n  /**\r\n   * Добавим кастомный хук для выбора строк\r\n   */\r\n  if (row_select) {\r\n    plugins.push(hooks => {\r\n      hooks.visibleColumns.push(columns => [\r\n        // Let's make a column for selection\r\n        {\r\n          id: 'selection',\r\n          column_width: row_select_width || 0,\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox\r\n          column_name: ({ getToggleAllRowsSelectedProps, getToggleAllPageRowsSelectedProps }) => {\r\n            if ((!settings.inner_page_size) || (settings.inner_page_size < 0) || row_select_all) {\r\n              return (\r\n                <div className=\"altrp-toggle-row\">\r\n                  <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n                </div>\r\n              );\r\n            }\r\n            return (\r\n              <div className=\"altrp-toggle-row\">\r\n                <IndeterminateCheckbox {...getToggleAllPageRowsSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n              </div>\r\n            );\r\n          },\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <div className=\"altrp-toggle-row\">\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} icons={{ checkedIcon, uncheckedIcon, indeterminateIcon }} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Редактирование данных\r\n   */\r\n  const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n\r\n  // We need to keep the table from resetting the pageIndex when we\r\n  // Update data. So we can keep track of that flag with a ref.\r\n\r\n  // When our cell renderer calls updateData, we'll use\r\n  // the rowIndex, columnId and new value to update the\r\n  // original data\r\n  const updateData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n    setRecords(old =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value,\r\n          }\r\n        }\r\n        return row\r\n      })\r\n    )\r\n  };\r\n  const getRowId = React.useCallback(row => {\r\n    return row.id\r\n  }, []);\r\n  /**\r\n   * настройки таблицы, свызов хука таблицы\r\n   * @type {*|{columns: (*|Array), data: {}, filterTypes: (*|{fuzzyText: (function(*=, *, *=): (*|Array)), text: (function(*, *, *=): *), between: (function(*, *, *=): *), equals: (function(*, *, *=): *), includesSome: (function(*, *, *=): *)}), defaultColumn: (*|{Filter: (function({column: *}, {}): *)})}}\r\n   */\r\n  const tableSettings = React.useMemo(() => {\r\n    const tableSettings = {\r\n      columns,\r\n      // data: replace_rows ? records : data,\r\n      data: records,\r\n      filterTypes,\r\n      autoResetPage: !skipPageReset,\r\n      defaultColumn,\r\n      updateData,\r\n    };\r\n    if (replace_rows) {\r\n      tableSettings.getRowId = getRowId;\r\n    }\r\n    // if(_.isObject(stateRef.current)){\r\n    //   tableSettings.initialState = stateRef.current;\r\n    // } else\r\n    if (isEditor()) {\r\n\r\n      if ((inner_page_size >= 1)) {\r\n        tableSettings.initialState = {\r\n          pageSize: Number(inner_page_size),\r\n        };\r\n      } else {\r\n        tableSettings.initialState = {\r\n          pageSize: data.length,\r\n        };\r\n      }\r\n    }\r\n    if(! _.isArray(tableSettings.data)){\r\n      if(_.isObject(tableSettings.data)){\r\n        tableSettings.data = [tableSettings.data];\r\n      } else {\r\n        tableSettings.data = [];\r\n      }\r\n    }\r\n    if(! _.isEmpty(tables_settings_for_subheading)){\r\n      let sortBy = tables_settings_for_subheading.map(item => {\r\n        return{\r\n          id: item.name,\r\n          desc: item.order === 'DESC',\r\n        };\r\n      });\r\n      _.set(tableSettings, 'initialState.sortBy', sortBy);\r\n    }\r\n    return tableSettings;\r\n  }, [\r\n      inner_page_size,\r\n      data,\r\n      columns,\r\n      stateRef,\r\n      records,\r\n      replace_rows,\r\n      skipPageReset,\r\n      tables_settings_for_subheading,\r\n  ]);\r\n  React.useEffect(() => {\r\n\r\n    if (_.isObject(stateRef.current)) {\r\n      tableSettings.initialState = stateRef.current;\r\n    }\r\n  }, [stateRef, data]);\r\n  const ReactTable = useTable(\r\n    tableSettings,\r\n    ...plugins\r\n  );\r\n\r\n  /**\r\n   * END настройки таблицы, свызов хука таблицы\r\n   */\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page, // Instead of using 'rows', we'll use page,\r\n    // which has only the rows for the active page\r\n\r\n    // The rest of these things are super handy, too ;)\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    getToggleHideAllColumnsProps,\r\n    allColumns,\r\n    // getRowId,\r\n    rows,\r\n    visibleColumns,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n    setPageSize,\r\n    selectedFlatRows,\r\n    totalColumnsWidth,\r\n    state: reactTableState,\r\n  } = ReactTable;\r\n  const {\r\n    pageIndex,\r\n    globalFilter,\r\n    groupBy,\r\n    selectedRowIds,\r\n    expanded,\r\n    pageSize } = reactTableState;\r\n\r\n  React.useEffect(() => {\r\n    if (store_state) {\r\n      storeWidgetState(widgetId, reactTableState);\r\n    }\r\n  });\r\n\r\n  React.useEffect(\r\n    () => {\r\n      if (!setPageSize) {\r\n        return\r\n      }\r\n      if ((!Number(inner_page_size) || Number(inner_page_size < 1))) {\r\n        setPageSize(data.length || 10);\r\n      }\r\n      setPageSize(Number(inner_page_size) || data.length || 10);\r\n    },\r\n    [inner_page_size, data],\r\n  );\r\n  function flatRows(rows = [], field = '') {\r\n    let _rows = [];\r\n    if (_.isEmpty(rows)) {\r\n      return _rows;\r\n    }\r\n    rows.forEach(r => {\r\n      r.original && (field ? _rows.push(_.get(r.original, field)) : _rows.push(r.original));\r\n      r.subRows && (_rows = _.concat(_rows, flatRows(r.subRows)));\r\n    });\r\n    return _rows;\r\n  }\r\n  const originalSelectedRows = React.useMemo(() => flatRows(selectedFlatRows), [selectedFlatRows]);\r\n  const selectedIds = React.useMemo(() => flatRows(selectedFlatRows, 'id'), [selectedFlatRows]);\r\n  React.useEffect(() => {\r\n    if (selected_storage &&\r\n        ! _.isEqual(altrpHelpers.getDataByPath(selected_storage), originalSelectedRows) &&\r\n        ! isEditor()) {\r\n      setDataByPath(selected_storage, originalSelectedRows);\r\n    }\r\n  }, [selectedFlatRows]);\r\n  React.useEffect(() => {\r\n    if (ids_storage &&\r\n        ! _.isEqual(altrpHelpers.getDataByPath(ids_storage), selectedIds) &&\r\n        ! isEditor()) {\r\n      setDataByPath(ids_storage, selectedIds);\r\n    }\r\n  }, [selectedFlatRows]);\r\n\r\n  /**\r\n   * Настройки пагинации\r\n   */\r\n  const paginationProps =\r\n    React.useMemo(() => {\r\n      let paginationProps = null;\r\n      if (inner_page_size && (inner_page_size >= 1)) {\r\n        paginationProps = {\r\n          settings,\r\n          nextPage,\r\n          previousPage,\r\n          pageIndex,\r\n          pageCount,\r\n          pageSize,\r\n          setPageSize,\r\n          widgetId,\r\n          gotoPage,\r\n        };\r\n      }\r\n      return paginationProps;\r\n    }, [inner_page_size, pageSize, pageCount, pageIndex, settings]);\r\n\r\n  let tableElement = React.useRef(null);\r\n\r\n\r\n  return  <React.Fragment>\r\n    {hide_columns && <div className=\"altrp-table-hidden\">\r\n      <div className=\"altrp-table-hidden__all\">\r\n        <IndeterminateCheckbox {...getToggleHideAllColumnsProps()} /> Toggle\r\n        All\r\n      </div>\r\n      {allColumns.map(column => {\r\n        if (['expander', 'selection'].indexOf(column.id) >= 0) {\r\n          return null;\r\n        }\r\n        return (\r\n          <div key={column.id} className=\"altrp-table-hidden__column\">\r\n            <label>\r\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\r\n              {column.column_name || column.id}\r\n              {column.id}\r\n            </label>\r\n          </div>\r\n        )\r\n      })}\r\n      <br />\r\n    </div>}\r\n    <TableComponent className={\"altrp-table altrp-table_columns-\" + columns.length}\r\n                    ReactTable={ReactTable}\r\n                    currentScreen={currentScreen}\r\n                    settings={settings}\r\n                    table={tableElement}\r\n                    ref={tableElement}\r\n                    {...getTableProps()}>\r\n      <div className=\"altrp-table-head\">\r\n        {renderAdditionalRows(settings)}\r\n        {headerGroups.map(headerGroup => {\r\n          const headerGroupProps = headerGroup.getHeaderGroupProps();\r\n\r\n          if (!resize_columns && !virtualized_rows) {\r\n            delete headerGroupProps.style;\r\n          }\r\n          return (\r\n            <div {...headerGroupProps} className=\"altrp-table-tr\">\r\n              {replace_rows && <div className=\"altrp-table-th altrp-table-cell\" style={{ width: replace_width }} />}\r\n              {headerGroup.headers.map((column, idx) => {\r\n                const { column_width, column_header_alignment } = column;\r\n                let columnProps = column.getHeaderProps(column.getSortByToggleProps());\r\n                    columnProps.settings = settings;\r\n                const resizerProps = {\r\n                  ...column.getResizerProps(),\r\n                  onClick: e => { e.stopPropagation(); }\r\n                };\r\n                if (!resize_columns && !virtualized_rows) {\r\n                  // delete columnProps.style;\r\n                  columnProps.style = {};\r\n                  if (column_width) columnProps.style.width = column_width + '%';\r\n                  if (column_header_alignment) columnProps.style.textAlign = column_header_alignment;\r\n                }\r\n                let columnNameContent = column.render('column_name');\r\n                if (_.isString(columnNameContent)) {\r\n                  columnNameContent = <span dangerouslySetInnerHTML={{ __html: column.render('column_name') || '&nbsp;' }} />;\r\n                }\r\n\r\n                if(table_transpose){\r\n                  _.unset(columnProps, 'style.width')\r\n                }\r\n                return <HeaderCellComponent {...columnProps}\r\n                                            column={column}\r\n                  className=\"altrp-table-th altrp-table-cell\"\r\n                  key={idx}>\r\n                  {columnNameContent}\r\n                  {column.canGroupBy ? (\r\n                    // If the column can be grouped, let's add a toggle\r\n                    <span {...column.getGroupByToggleProps()} className=\"altrp-table-th__group-toggle\">\r\n                      {column.isGrouped ?\r\n                        renderIcon(hide_not_grouped_column_icon, not_grouped_column_icon, ' 🛑 ', 'not-grouped-column') :\r\n                        renderIcon(hide_grouped_column_icon, grouped_column_icon, ' 👊 ', 'grouped-column')}\r\n                    </span>\r\n                  ) : null}\r\n                  {\r\n                    (column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? iconsManager().renderIcon('chevron', { className: 'rotate-180 sort-icon ' })\r\n                        : iconsManager().renderIcon('chevron', { className: 'sort-icon' })\r\n                      : '')\r\n                  }\r\n                  {\r\n                    column.column_is_filtered &&\r\n                    <label className={`altrp-label altrp-label_${column.column_filter_type}`} onClick={e => { e.stopPropagation() }}>\r\n                      {column.render('Filter')}\r\n                    </label>\r\n                  }\r\n                  {\r\n                    resize_columns && <div\r\n                      {...resizerProps}\r\n                      className={`altrp-table__resizer ${column.isResizing ? 'altrp-table__resizer_resizing' : ''\r\n                        }`}\r\n                    />\r\n                  }\r\n                </HeaderCellComponent>;\r\n              }\r\n              )}\r\n            </div>)\r\n        }\r\n        )}\r\n        {global_filter && <div className=\"altrp-table-tr\">\r\n          <th className=\"altrp-table-th altrp-table-th_global-filter altrp-table-cell\"\r\n            role=\"cell\"\r\n            colSpan={visibleColumns.length + replace_rows}\r\n            style={{\r\n              textAlign: 'left',\r\n            }}\r\n          >\r\n            <GlobalFilter\r\n              widgetId={widgetId}\r\n              preGlobalFilteredRows={preGlobalFilteredRows}\r\n              globalFilter={globalFilter}\r\n              setGlobalFilter={setGlobalFilter}\r\n              settings={settings}\r\n            />\r\n          </th>\r\n        </div>\r\n        }\r\n      </div>\r\n      {_status === 'success' ?\r\n\r\n        <TableBody {...{\r\n          getTableBodyProps,\r\n          prepareRow,\r\n          totalColumnsWidth,\r\n          rows,\r\n          visibleColumns,\r\n          moveRow,\r\n          settings,\r\n          page,\r\n          cardTemplate,\r\n        }}\r\n        /> :\r\n        <div><div className=\"altrp-table-tr altrp-table-tr_loading\"><div className=\"altrp-table-td altrp-table-td_loading\" colSpan={visibleColumns.length + replace_rows}>\r\n          {(_status === 'loading' ? (loading_text || null) : null)}\r\n        </div></div></div>}\r\n    </TableComponent>\r\n    {paginationProps && <Pagination {...paginationProps} />}\r\n  </React.Fragment>\r\n}\r\n\r\n\r\n/**\r\n * Define a default UI for filtering\r\n * @param filterValue\r\n * @param preFilteredRows\r\n * @param setFilter\r\n * @param {string} filter_placeholder\r\n * @param {string} column_filter_type\r\n * @param {boolean} column_is_filtered\r\n * @param {{}}settings\r\n * @return {*}\r\n * @constructor\r\n */\r\n\r\nfunction DefaultColumnFilter({\r\n  column: { filterValue,\r\n    preFilteredRows,\r\n    setFilter,\r\n    filter_placeholder,\r\n    column_filter_type,\r\n    column_is_filtered,\r\n  },\r\n}, settings) {\r\n  const count = preFilteredRows.length;\r\n  filter_placeholder = filter_placeholder ? filter_placeholder.replace('{{count}}', count) : `Search ${count} records...`;\r\n  return (\r\n    <input\r\n      value={filterValue || ''}\r\n      className=\"altrp-field\"\r\n      onChange={e => {\r\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n      }}\r\n      placeholder={filter_placeholder}\r\n    />\r\n  )\r\n}\r\n/**\r\n * Селект для фильтрации по значениям в колонке\r\n * @param filterValue\r\n * @param setFilter\r\n * @param preFilteredRows\r\n * @param id\r\n * @param widgetId\r\n * @param filter_placeholder\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction SelectColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id, filter_placeholder },\r\n  widgetId\r\n}) {\r\n  const options = React.useMemo(() => {\r\n    let _options = new Set();\r\n    preFilteredRows.forEach(row => {\r\n      _options.add(row.values[id])\r\n    });\r\n    return [..._options.values()].map(option => ({\r\n      value: option,\r\n      label: option + '',\r\n    }));\r\n  }, [id, preFilteredRows]);\r\n\r\n  // Render a multi-select box\r\n  return (<AltrpSelect options={options}\r\n    isMulti={true}\r\n    placeholder={filter_placeholder || 'Select some...'}\r\n    className=\"altrp-table__filter-select\"\r\n    classNamePrefix={widgetId + ' altrp-field-select2'}\r\n    onChange={v => {\r\n      if (!_.isArray(v)) {\r\n        v = [];\r\n      }\r\n      let filterValue = v.map(option => option.value);\r\n      setFilter(filterValue);\r\n    }} />\r\n  );\r\n}\r\n\r\n/**\r\n * This is a custom filter UI that uses a\r\n * slider to set the filter value between a column's\r\n * min and max values\r\n * @param filterValue\r\n * @param setFilter\r\n * @param preFilteredRows\r\n * @param filter_button_text\r\n * @param id\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction SliderColumnFilter({\r\n  column: { filterValue, setFilter, preFilteredRows, id, filter_button_text },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let value = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    if (id === '##' && preFilteredRows.length) {\r\n      value = preFilteredRows[0].index;\r\n    }\r\n    let min = value;\r\n    let max = value;\r\n    preFilteredRows.forEach(row => {\r\n      let value = row.values[id];\r\n      if (id === '##') {\r\n        value = row.index;\r\n      }\r\n      min = Math.min(value, min);\r\n      max = Math.max(value, max);\r\n    });\r\n    return [min, max]\r\n  }, [id, preFilteredRows]);\r\n  const buttonText = filter_button_text || 'Off';\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"range\"\r\n        className=\"altrp-field\"\r\n        min={min}\r\n        max={max}\r\n        value={filterValue || min}\r\n        onChange={e => {\r\n          setFilter(parseInt(e.target.value, 10))\r\n        }}\r\n      />\r\n      <button className={`altrp-btn ${(filterValue !== undefined) ? 'active' : ''}`} onClick={() => setFilter(undefined)}>{buttonText}</button>\r\n    </>\r\n  )\r\n}\r\n/**\r\n * This is a custom UI for our 'between' or number range\r\n * filter. It uses two number boxes and filters rows to\r\n * ones that have values between the two\r\n * @param filterValue\r\n * @param preFilteredRows\r\n * @param setFilter\r\n * @param filter_max_placeholder\r\n * @param filter_min_placeholder\r\n * @param id\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction NumberRangeColumnFilter({\r\n  column: { filterValue = [],\r\n    preFilteredRows,\r\n    setFilter,\r\n    filter_max_placeholder,\r\n    filter_min_placeholder,\r\n    id },\r\n}) {\r\n  const [min, max] = React.useMemo(() => {\r\n    let value = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\r\n    if (id === '##' && preFilteredRows.length) {\r\n      value = preFilteredRows[0].index;\r\n    }\r\n    let min = value;\r\n    let max = value;\r\n    preFilteredRows.forEach(row => {\r\n      let value = row.values[id];\r\n      if (id === '##') {\r\n        value = row.index;\r\n      }\r\n      min = Math.min(value, min);\r\n      max = Math.max(value, max);\r\n    });\r\n    return [min, max]\r\n  }, [id, preFilteredRows]);\r\n  let minPlaceHolder = filter_min_placeholder || `Min (${min})`;\r\n  let maxPlaceHolder = filter_max_placeholder || `Max (${max})`;\r\n  return (\r\n    <div className=\"altrp-filter-group\"\r\n      style={{\r\n        display: 'flex',\r\n      }}\r\n    >\r\n      <input\r\n        value={filterValue[0] || ''}\r\n        type=\"number\"\r\n        className=\"altrp-field\"\r\n        onChange={e => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\r\n        }}\r\n        placeholder={minPlaceHolder}\r\n        style={{\r\n          width: '70px',\r\n          marginRight: '0.5rem',\r\n        }}\r\n      />\r\n        to\r\n      <input\r\n        value={filterValue[1] || ''}\r\n        type=\"number\"\r\n        className=\"altrp-field\"\r\n        onChange={e => {\r\n          const val = e.target.value;\r\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\r\n        }}\r\n        placeholder={maxPlaceHolder}\r\n        style={{\r\n          width: '70px',\r\n          marginLeft: '0.5rem',\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @param widgetId\r\n * @return {Array}\r\n */\r\nexport function settingsToColumns(settings, widgetId) {\r\n  let columns = [];\r\n  let {\r\n    tables_columns,\r\n    card_template,\r\n    row_expand,\r\n    virtualized_rows,\r\n    resize_columns,\r\n    hide_expanded_row_icon,\r\n    expanded_row_icon,\r\n    hide_not_expanded_row_icon,\r\n    edit_disabled,\r\n    not_expanded_row_icon\r\n  } = settings;\r\n  tables_columns = tables_columns || [];\r\n  let columnOrder = (getResponsiveSetting(settings, 'columns_order') || '').trim();\r\n  columnOrder = columnOrder ? columnOrder.split(',') : [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    /**\r\n     * Колонку проказываем, если есть accessor или список actions\r\n     */\r\n    if (((_column.actions && _column.actions.length) || _column.accessor)) {\r\n      _column.edit_disabled = edit_disabled;\r\n      _column._accessor = _column.accessor;\r\n      if(_column.accessor && _column.accessor.indexOf('?') !== -1 && _column.accessor.indexOf(':') !== -1) {\r\n        _column.accessor = _column.accessor.split('?')[0].trim();\r\n      }\r\n      _column.column_name = _column.column_name || '&nbsp;';\r\n      if (_column.column_is_filtered) {\r\n\r\n        _column.filter = 'fuzzyText';\r\n        switch (_column.column_filter_type) {\r\n          case 'min_max': {\r\n            _column.filter = 'between';\r\n            _column.Filter = NumberRangeColumnFilter;\r\n          }\r\n            break;\r\n          case 'slider': {\r\n            _column.filter = 'equals';\r\n            _column.Filter = SliderColumnFilter;\r\n          }\r\n            break;\r\n          case 'select': {\r\n            _column.filter = 'includesSome';\r\n            _column.Filter = ({ column }) => <SelectColumnFilter column={column} widgetId={widgetId} />;\r\n          }\r\n            break;\r\n          case 'text': {\r\n            switch(_column.column_text_filter_type){\r\n              case 'full_match': {\r\n                _column.filter = 'fullMatchText';\r\n              }\r\n              break;\r\n              case 'partial_match': {\r\n                _column.filter = 'partialMatchText';\r\n              }\r\n              break;\r\n            }\r\n          }\r\n            break;\r\n        }\r\n      }\r\n      _column.canGroupBy = ! !_column.group_by;\r\n      _column.disableSortBy = !_column.column_is_sorted;\r\n      if (_column.aggregate) {\r\n        let aggregateTemplate = _column.aggregate_template || `{{value}} Unique Names`;\r\n        _column.Aggregated = ({ value }) => {\r\n          return aggregateTemplate.replace(/{{value}}/g, value)\r\n        };\r\n      }\r\n      if (virtualized_rows || resize_columns) {\r\n        // _column.width = (Number(_column.column_width) || 150) + '%';\r\n        _column.width = (Number(_column.column_width) || 150);\r\n      }\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  if (settings.row_expand) {\r\n    columns.unshift({\r\n      id: 'expander', // Make sure it has an ID\r\n      column_name: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n        <span {...getToggleAllRowsExpandedProps()} className=\"altrp-table__all-row-expander\">\r\n          {isAllRowsExpanded ?\r\n            renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n            renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n        </span>\r\n      ),\r\n      Cell: ({ row }) =>\r\n        // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n        // to build the toggle for expanding a row\r\n        (card_template && row_expand || row.canExpand) ? (\r\n          <span className=\"altrp-table__row-expander\"\r\n            {...row.getToggleRowExpandedProps({\r\n              style: {\r\n                // We can even use the row.depth property\r\n                // and paddingLeft to indicate the depth\r\n                // of the row\r\n                paddingLeft: `${row.depth * 2}rem`,\r\n              },\r\n            })}\r\n          >\r\n            {row.isExpanded ?\r\n              renderIcon(hide_expanded_row_icon, expanded_row_icon, '👇', 'expanded-row') :\r\n              renderIcon(hide_not_expanded_row_icon, not_expanded_row_icon, '👉', 'not-expanded-row')}\r\n          </span>\r\n        ) : null,\r\n    });\r\n  }\r\n  if(columnOrder.length){\r\n    const _column = [];\r\n    columnOrder.forEach(columnIndex=>{\r\n      columnIndex = parseInt(columnIndex) - 1;\r\n      columns[columnIndex] && (_column.indexOf(columns[columnIndex]) === -1) ? _column.push(columns[columnIndex]) : null;\r\n    });\r\n    columns = _column;\r\n  }\r\n  return columns;\r\n}\r\n\r\n/**\r\n * Отрисовка чекбокса\r\n * @type {*|React.ForwardRefExoticComponent<React.PropsWithoutRef<{indeterminate: *, rest: *}> & React.RefAttributes<any>>}\r\n */\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, icons, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate]);\r\n    const icon = icons.checkedIcon.name ?\r\n      rest.checked ?\r\n        icons.checkedIcon :\r\n        indeterminate ? icons.indeterminateIcon : icons.uncheckedIcon :\r\n      null;\r\n    return (\r\n      <label className={\"check-icon--\" + (rest.checked ? \"checked\" : indeterminate ? \"indeterminate\" : \"unchecked\")}>\r\n        {icon && renderAssetIcon(icon)}\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} className={icon ? \"hidden\" : \"\"} />\r\n      </label>\r\n    )\r\n  }\r\n);\r\n/**\r\n * Define a default UI for filtering\r\n * @param {[]} preGlobalFilteredRows\r\n * @param {string} globalFilter\r\n * @param {function} setGlobalFilter\r\n * @param {string} widgetId\r\n * @param {{}} settings\r\n * @return {*}\r\n * @constructor\r\n */\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n  widgetId,\r\n  settings,\r\n}) {\r\n  const { global_filter_placeholder, global_filter_label } = settings;\r\n  const count = preGlobalFilteredRows.length;\r\n  const [value, setValue] = React.useState(globalFilter);\r\n  const onChange = useAsyncDebounce(value => {\r\n    setGlobalFilter(value || undefined);\r\n  }, 200);\r\n  let labelText = global_filter_label || `Search:${' '}`;\r\n  let placeholder = global_filter_placeholder || `${count} records...`;\r\n  placeholder = placeholder.replace(/{{count}}/g, count);\r\n  return (\r\n    <div className=\"altrp-table-global-filter\">\r\n      <label htmlFor={`altrp-table-global-filter${widgetId}`} dangerouslySetInnerHTML={{ __html: labelText }} />\r\n      <input\r\n        id={`altrp-table-global-filter${widgetId}`}\r\n        value={value || \"\"}\r\n        onChange={e => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={placeholder}\r\n\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default (props) => {\r\n  props = { ...props };\r\n  if(props.settings.choose_datasource === 'datasource'){\r\n    let length = React.useMemo(()=>{\r\n\r\n      return props.settings.inner_page_size > 0 ? 100 : 10;\r\n    }, [props.settings.inner_page_size]);\r\n\r\n    props._status = 'success';\r\n    if(isEditor()){\r\n      props = {...props};\r\n      props.settings = {...props.settings};\r\n      props.data = Array.from({length}, () => ({}));\r\n      setAltrpIndex(props.data);\r\n    }\r\n    return <AltrpTableWithoutUpdate {...props}/>\r\n  }\r\n  return <AltrpQueryComponent {...props}><AltrpTableWithoutUpdate /></AltrpQueryComponent>\r\n}\r\n"],"sourceRoot":""}