{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/components/altrp-map/AltrpMapConstructor.js"],"names":["MapDesigner","React","settings","id","useState","isLoading","setIsLoading","geoJson","setGeoJson","editable","canvas","zoom","lat","lng","latDs","lngDs","centerByDatasource","style_height","style_margin","objects","url","field_id","url_connect","field_first_connect","field_second_connect","onlyDatasource","parameters","latitude","longitude","currentDataStorage","useSelector","state","data","getDataByPath","featuredObjectsFromModel","useMemo","axios","response","map","item","dbID","_","get","result","JSON","parse","dynamicGeoObjectsRepeater","keys","length","r","geoObj","path","Array","isArray","type","geometry","coordinates","Number","inCluster","useCluster","properties","fillOpacity","icon","tooltip","tooltipByKeyboard","popup","popupByKeyboard","fillColor","color","colorPickedHex","flat","getData","useCallback","dynamicGeoObjects","features","req","status","responseData","cloneDeep","featuers","concat","getDataFromModel","featuredFromModel","dataFromModel","repeaterObjects","filter","useEffect","Suspense","fallback","saveData","stringify","style","height","size","unit","marginTop","top","marginBottom","bottom","marginLeft","left","marginRight","right","isEditable","preferCanvas","center"],"mappings":"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","file":"7983.editor.js","sourcesContent":["import React, {\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n  Suspense\r\n} from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getDataByPath } from \"../../../../../front-app/src/js/helpers\";\r\n\r\nconst MapDesigner = React.lazy(() => import(\"./MapDesigner\"));\r\n\r\nfunction AltrpMapConstructor({ settings, id }) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [geoJson, setGeoJson] = useState({});\r\n\r\n  const {\r\n    editable,\r\n    canvas,\r\n    zoom,\r\n    lat,\r\n    lng,\r\n    latDs,\r\n    lngDs,\r\n    centerByDatasource = false,\r\n    style_height = {},\r\n    style_margin = {},\r\n    objects = {},\r\n    url,\r\n    field_id,\r\n    url_connect = null,\r\n    field_first_connect = null,\r\n    field_second_connect = null,\r\n    onlyDatasource = false,\r\n    parameters\r\n  } = settings;\r\n  let latitude = lat;\r\n  let longitude = lng;\r\n\r\n  const currentDataStorage = useSelector(\r\n    state => state.currentDataStorage.data\r\n  );\r\n  if (centerByDatasource) {\r\n    const latDatasource = getDataByPath(latDs, 50.7496449);\r\n    const lngDatasource = getDataByPath(lngDs, 86.1250068);\r\n    latitude = latDatasource;\r\n    longitude = lngDatasource;\r\n  }\r\n\r\n  const featuredObjectsFromModel = useMemo(async () => {\r\n    const response = await axios.get(url);\r\n    const data = response.data.data.map(item => {\r\n      const dbID = _.get(item, \"id\");\r\n      const responseItem = JSON.parse(_.get(item, field_id));\r\n      const result = responseItem;\r\n      result[\"dbID\"] = dbID;\r\n      return result;\r\n    });\r\n    return data;\r\n  }, [url, field_id]);\r\n\r\n  const dynamicGeoObjectsRepeater = useMemo(() => {\r\n    if (_.keys(objects).length > 0) {\r\n      return objects\r\n        .map(r => {\r\n          const geoObj = getDataByPath(r.path, []);\r\n          const result = Array.isArray(geoObj)\r\n            ? geoObj.map(data => ({\r\n                type: \"Feature\",\r\n                geometry: {\r\n                  type: \"Point\",\r\n                  coordinates: [\r\n                    Number(_.get(data, r.latitude)),\r\n                    Number(_.get(data, r.longitude))\r\n                  ]\r\n                },\r\n                id: data.id,\r\n                inCluster: r?.useCluster || false,\r\n                properties: {\r\n                  fillOpacity: 1,\r\n                  icon: r.icon || \"GoogleMarker\",\r\n                  tooltip: r.tooltipByKeyboard\r\n                    ? r.tooltip\r\n                    : _.get(data, r.tooltip) || \"\",\r\n                  popup: r.popupByKeyboard\r\n                    ? r.popup\r\n                    : _.get(data, r.popup) || \"\",\r\n                  fillColor: r.color?.colorPickedHex || \"#3388ff\"\r\n                }\r\n              }))\r\n            : {\r\n                type: \"Feature\",\r\n                geometry: {\r\n                  type: \"Point\",\r\n                  coordinates: [\r\n                    Number(_.get(geoObj, r.latitude)),\r\n                    Number(_.get(geoObj, r.longitude))\r\n                  ]\r\n                },\r\n\r\n                id: geoObj.id,\r\n                inCluster: r?.useCluster || false,\r\n                properties: {\r\n                  fillOpacity: 1,\r\n                  icon: r.icon || \"GoogleMarker\",\r\n                  tooltip: r.tooltipByKeyboard\r\n                    ? r.tooltip\r\n                    : _.get(geoObj, r.tooltip) || \"\",\r\n                  popup: r.popupByKeyboard\r\n                    ? r.popup\r\n                    : _.get(geoObj, r.popup) || \"\",\r\n                  fillColor: r.color?.colorPickedHex || \"#3388ff\"\r\n                }\r\n              };\r\n          return result;\r\n        })\r\n        .flat();\r\n    }\r\n  }, [objects, currentDataStorage]);\r\n  // Сохраняем данные карты\r\n  const handleSave = data => {\r\n    if (!onlyDatasource) {\r\n      if (typeof url === \"undefined\" || url === null) {\r\n        axios.post(`/ajax/maps/${id}`, {\r\n          data: JSON.stringify({\r\n            type: \"FeatureCollection\",\r\n            features: data.features.filter(\r\n              item => typeof item.id !== \"undefined\"\r\n            )\r\n          })\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const getData = useCallback(\r\n    async (id, dynamicGeoObjects) => {\r\n      if (onlyDatasource) {\r\n        let data = {\r\n          type: \"FeatureCollection\",\r\n          features: dynamicGeoObjects\r\n        };\r\n        setGeoJson(data);\r\n        setIsLoading(false);\r\n      } else {\r\n        try {\r\n          setIsLoading(true);\r\n          const req = await axios(`/ajax/maps/${id}`);\r\n          if (req.status === 200) {\r\n            let responseData = _.cloneDeep(req.data);\r\n            let data = [];\r\n            let featuers = responseData.features;\r\n            if (_.keys(dynamicGeoObjects).length > 0) {\r\n              data = featuers.concat(dynamicGeoObjects);\r\n            }\r\n            req.data.features = data.length > 0 ? data : featuers;\r\n            setGeoJson(req.data);\r\n            setIsLoading(false);\r\n          }\r\n        } catch (error) {\r\n          let data = {\r\n            type: \"FeatureCollection\",\r\n            features: dynamicGeoObjects\r\n          };\r\n          setGeoJson(data);\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    },\r\n    [id]\r\n  );\r\n\r\n  const getDataFromModel = useCallback(\r\n    async (featuredFromModel, dynamicGeoObjects) => {\r\n      if (url !== null) {\r\n        try {\r\n          setIsLoading(true);\r\n          const dataFromModel = await featuredFromModel;\r\n          const repeaterObjects = dynamicGeoObjects;\r\n          let result = dataFromModel;\r\n          result = result\r\n            .concat(repeaterObjects)\r\n            .filter(item => typeof item !== \"undefined\");\r\n          setGeoJson({\r\n            type: \"FeatureCollection\",\r\n            features: result\r\n          });\r\n          setIsLoading(false);\r\n        } catch (error) {}\r\n      } else {\r\n        return false;\r\n      }\r\n    },\r\n    [url]\r\n  );\r\n  // При изменении карты подгружаем новые данные\r\n  useEffect(() => {\r\n    if (typeof url !== \"undefined\" && url != \"\" && url !== null) {\r\n      getDataFromModel(featuredObjectsFromModel, dynamicGeoObjectsRepeater);\r\n    } else {\r\n      getData(id, dynamicGeoObjectsRepeater);\r\n    }\r\n  }, [id, dynamicGeoObjectsRepeater]);\r\n\r\n  return (\r\n    <Suspense fallback={\"Loading\"}>\r\n      <MapDesigner\r\n        data={geoJson}\r\n        saveData={handleSave}\r\n        isLoading={isLoading}\r\n        id={id}\r\n        url_connect={url_connect}\r\n        field_first_connect={field_first_connect}\r\n        field_second_connect={field_second_connect}\r\n        style={{\r\n          height: style_height.size + style_height.unit,\r\n          marginTop: style_margin.top + style_margin.unit,\r\n          marginBottom: style_margin.bottom + style_margin.unit,\r\n          marginLeft: style_margin.left + style_margin.unit,\r\n          marginRight: style_margin.right + style_margin.unit\r\n        }}\r\n        isEditable={editable}\r\n        preferCanvas={canvas}\r\n        zoom={+zoom}\r\n        url={url}\r\n        field_id={field_id}\r\n        center={[latitude || 50.7496449, longitude || 86.1250068]}\r\n        parameters={parameters}\r\n      />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default AltrpMapConstructor;\r\n"],"sourceRoot":""}