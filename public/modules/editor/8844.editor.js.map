{"version":3,"sources":["webpack:///./resources/modules/admin/src/components/AutoUpdateInput.js","webpack:///./resources/modules/editor/src/js/components/altrp-table/altrp-table.js"],"names":["props","resource","Resource","route","state","value","disabled","changeValue","bind","onChange","onKeyDown","prevProps","prevState","this","console","log","setState","undefined","resourceid","get","res","e","keyCode","newValue","target","_","isFunction","changevalue","onBlur","put","column_value","className","inputProps","Component","AltrpTable","settings","query","data","_status","currentModel","_error","setSortSettings","setFilterSettings","filterSetting","setPage","_latestData","page","sortSetting","tables_columns","length","children","defaultSortSettings","forEach","column","column_is_default_sorted","order_by","accessor","order","groupBy","React","getGroupBy","columns","counter","getCounterStart","collapsing","group_collapsing","collapsedGroups","setCollapsedGroups","useState","updatedData","setUpdatedData","doubleClicked","setDoubleClicked","groupingStore","settingsToColumns","map","row","id","rowId","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","sortingHandler","filterHandler","filteredColumn","searchString","filterParams","renderAdditionalRows","headerGroup","getHeaderGroupProps","headers","renderTh","table_style_table_striple_style","message","i","rowStyles","original","mbParseJSON","key","renderGroupingTr","getRowProps","style","table_hover_row","indexOf","last","cells","cell","_i","cellContent","render","linkTag","isEditor","Link","column_external_link","column_body_alignment","textAlign","cellProps","getCellProps","_cellContent","doubleClickContent","column_is_editable","column_edit_url","columnEditUrl","parseURLTemplate","_accessor","onDoubleClick","cellClassName","isObject","column_link","to","href","column_blank_link","dangerouslySetInnerHTML","__html","trim","cellStyles","assign","renderCellActions","isString","renderFooter","paginationType","pageSize","onClick","old","Math","max","prev_text","current_page_text","hasMore","next_text","_column","column_name","actions","push","additional_rows","isArray","additional_cells","rowspan","colspan","role","colSpan","rowSpan","title","column_width","column_header_alignment","thProps","getHeaderProps","width","column_is_sorted","thText","iconsManager","renderIcon","column_is_filtered","type","stopPropagation","group_by","text","collapsed","collapsed_icon","expanded_icon","toggleGroup","renderAsset","assetType","name","currentRowHeading","filter","g","footerColumns","footer_columns","footerColumn","column_footer_alignment","content","window","altrphelpers","context","replace","eval","error","replaceContentWithData","action","tag","actionContent","link","actionProps","classes","marginLeft","marginRight","marginTop","marginBottom","target_blank","iconSize","iconProps","height","icon"],"mappings":"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","file":"8844.editor.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Resource from \"../../../editor/src/js/classes/Resource\";\r\n\r\nclass AutoUpdateInput extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.resource = new Resource({\r\n      route: this.props.route,\r\n    });\r\n\r\n    this.state = {\r\n      value: this.props.value || '',\r\n      disabled: ! this.props.value,\r\n    };\r\n    this.changeValue = this.changeValue.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Обновление роута или значения через пропсы\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  componentDidUpdate(prevProps, prevState){\r\n    if(prevProps.route !== this.props.route){\r\n      this.resource = new Resource({\r\n        route: this.props.route,\r\n      });\r\n      console.log(this.resource);\r\n    }\r\n    if(prevProps.value !== this.props.value && this.props.value !== this.state.value){\r\n      // console.log(this.props.value);\r\n      this.setState(state =>({...state, value: this.props.value}));\r\n    }\r\n  }\r\n\r\n  async componentDidMount(){\r\n    if(this.props.value !== undefined || ! this.props.resourceid){\r\n      return;\r\n    }\r\n    let res = await this.resource.get(this.props.resourceid);\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: res[this.props.resourceid] || '',\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * При нажатии на enter тоже обновим данные\r\n   * @param e\r\n   */\r\n  onKeyDown(e){\r\n    if(e.keyCode === 13){\r\n      this.changeValue(e);\r\n    }\r\n  }\r\n\r\n  onChange(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        value: newValue,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.changevalue)){\r\n      this.props.changevalue(newValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Запрос на именение поля\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n  async changeValue(e){\r\n    let newValue = e.target.value;\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: true,\r\n      }\r\n    });\r\n    if(_.isFunction(this.props.onBlur)){\r\n      this.props.onBlur(newValue);\r\n    }\r\n    let res = await this.resource.put(this.props.resourceid, {value: newValue, column_value: newValue});\r\n\r\n    this.setState(state=>{\r\n      return{...state,\r\n        disabled: false,\r\n      }\r\n    });\r\n  }\r\n  render(){\r\n    let {className} = this.props;\r\n    if(this.state.disabled){\r\n      className += ' pointer-event-none';\r\n    }\r\n    const inputProps = {...this.props};\r\n    delete inputProps.changevalue;\r\n    return<input{...inputProps} className={className}\r\n                onBlur={this.changeValue}\r\n                onKeyDown={this.onKeyDown}\r\n                onChange={this.onChange}\r\n                value={this.state.value}/>\r\n  }\r\n}\r\n\r\nexport default AutoUpdateInput","import React, { useState, } from \"react\";\r\nimport {useTable, } from \"react-table\";\r\nimport ('../../../sass/altrp-pagination.scss');\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n  isEditor, mbParseJSON,\r\n  parseURLTemplate, renderAsset, replaceContentWithData\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport {iconsManager} from \"../../../../../admin/src/js/helpers\";\r\nimport AutoUpdateInput from \"../../../../../admin/src/components/AutoUpdateInput\";\r\nimport AltrpQueryComponent from \"../altrp-query-component/altrp-query-component\";\r\n\r\n\r\n/**\r\n *\r\n * @param settings\r\n * @param {Query} query\r\n * @param {{}} data\r\n * @param {AltrpModel} currentModel\r\n * @param {string} _status\r\n * @param {{}} _error\r\n * @param {function} setSortSettings\r\n * @param {function} setFilterSettings\r\n * @param {function} setPage\r\n * @param {{}} filterSetting\r\n * @param {{}} sortSetting\r\n * @param {int} page\r\n * @param {[]} _latestData\r\n * @return {*}\r\n * @constructor\r\n */\r\nconst AltrpTable = ({settings,\r\n                      query,\r\n                      data,\r\n                      currentModel,\r\n                      _status,\r\n                      _error,\r\n                      setSortSettings,\r\n                      setFilterSettings,\r\n                      filterSetting,\r\n                      setPage,\r\n                      _latestData,\r\n                      page,\r\n                      sortSetting}) => {\r\n  if (! (settings.tables_columns && settings.tables_columns.length)) {\r\n    return <div children=\"Please Add Column\"/>\r\n  }\r\n\r\n  const defaultSortSettings =  {};\r\n  settings.tables_columns.forEach(column => {\r\n    if(column.column_is_default_sorted && !defaultSortSettings.order_by){\r\n      defaultSortSettings.order_by = column.accessor;\r\n      defaultSortSettings.order = _.get(column, 'column_is_default_sorted_direction', 'ASC')\r\n    }\r\n  });\r\n  let groupBy = React.useMemo(\r\n      ()=> {\r\n        return _.get(settings, 'group_by_column_name') ? _.get(settings, 'group_by_column_name') : getGroupBy(settings.tables_columns)\r\n      }, [settings]\r\n      );\r\n  React.useEffect(()=>{\r\n    if(groupBy){\r\n      setSortSettings({\r\n        order: 'ASC',\r\n        order_by: groupBy,\r\n      })\r\n    }\r\n  }, [groupBy]);\r\n\r\n  let counter = query.getCounterStart(page);\r\n\r\n  const collapsing = React.useMemo(()=>settings.group_collapsing);\r\n  const collapsedInitiate = [];\r\n  const [collapsedGroups, setCollapsedGroups] = React.useState(collapsedInitiate);\r\n  const [updatedData, setUpdatedData] = useState({});\r\n  const [doubleClicked, setDoubleClicked] =  useState({});\r\n  const groupingStore = [];\r\n\r\n  \r\n  let columns = [];\r\n  columns = settingsToColumns(settings);\r\n  \r\n  /**\r\n   * обновление данных при изменении ячейки\r\n   * @type {any[]}\r\n   * @private\r\n   */\r\n  data = data.map((row)=>{\r\n    if(row.id === updatedData.rowId){\r\n      row[updatedData.column] = updatedData.value;\r\n      return{...row};\r\n    }\r\n    return row;\r\n  });\r\n  let {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({\r\n    columns: React.useMemo(\r\n        () => (\r\n            columns || []\r\n        ),\r\n        [settings.tables_columns]\r\n    ),\r\n    data: React.useMemo(() => (data || []), [data]),\r\n  }, );\r\n  /**\r\n   * Обработка клика для сортировки\r\n   */\r\n  const sortingHandler = order_by => {\r\n    setSortSettings({\r\n    order_by, \r\n    order: sortSetting &&\r\n      (sortSetting.order_by === order_by) ? (sortSetting.order === \"DESC\" ? \"ASC\" :  \"DESC\") : \"ASC\"\r\n  });\r\n  };\r\n  /**\r\n   * Изменение поля для фильтрации\r\n   */\r\n  const filterHandler = (filteredColumn, searchString) => {\r\n    setPage(1);\r\n    const filterParams = {...filterSetting};\r\n    if(searchString){\r\n      filterParams[filteredColumn] = searchString;\r\n    } else {\r\n      delete filterParams[filteredColumn];\r\n    }\r\n    setFilterSettings(filterParams);\r\n  };\r\n  \r\n  return <><table className={\"altrp-table altrp-table_columns-\" + columns.length} {...getTableProps()}>\r\n    <thead className=\"altrp-table-head\">\r\n    {renderAdditionalRows(settings)}\r\n    {headerGroups.map(headerGroup => (\r\n        <tr {...headerGroup.getHeaderGroupProps()} className=\"altrp-table-tr\">\r\n          {headerGroup.headers.map(column => {\r\n            return renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler});\r\n          }\r\n          )}\r\n        </tr>\r\n    ))}\r\n    </thead>\r\n    <tbody {...getTableBodyProps()} className={`altrp-table-tbody ${settings.table_style_table_striple_style ? ' altrp-table-tbody--striped' : ''}`}>\r\n    {_status === \"error\" ? <tr>\r\n        <td>{_error.message}</td>\r\n      </tr> : _status === \"loading\" ? <tr>\r\n        <td>Loading</td>\r\n      </tr>\r\n      : rows.map((row, i) => {\r\n          prepareRow(row);\r\n          let rowStyles = _.get(settings, 'field_name_for_row_styling');\r\n          rowStyles = _.get(row.original, rowStyles, '');\r\n          rowStyles = mbParseJSON(rowStyles, {});\r\n\r\n          return (<React.Fragment key={row.id}>\r\n                {renderGroupingTr(row, groupBy, groupingStore, settings, collapsing, setCollapsedGroups, collapsedGroups)}\r\n            <tr {...row.getRowProps()}\r\n                style={rowStyles}\r\n                className={`altrp-table-tr ${settings.table_hover_row ? 'altrp-table-background' : ''} ${\r\n                  /**\r\n                   * Проверка нужно ли скрыть эту строку\r\n                   */\r\n                    (collapsing && (collapsedGroups.indexOf(_.last(groupingStore)) !== -1)) ? 'altrp-d-none' : ''\r\n                    }`}>\r\n              {row.cells.map((cell, _i) => {\r\n                let cellContent = cell.render('Cell');\r\n                let linkTag = isEditor() ? 'a': Link;\r\n                if(columns[_i].column_external_link && ! isEditor()) {\r\n                  linkTag = 'a';\r\n                }\r\n                let style = cell.column.column_body_alignment ? { textAlign: cell.column.column_body_alignment } : {};\r\n                const cellProps = {...cell.getCellProps()};\r\n                let _cellContent = cell.value;\r\n\r\n                /**\r\n                 * Если в настройках колонки установлено редактирование и есть url запроса на редактирование\r\n                 * то добавляем особое поведение\r\n                 */\r\n                let doubleClickContent = '';\r\n                if(columns[_i].column_is_editable && columns[_i].column_edit_url){\r\n                  let columnEditUrl = parseURLTemplate(columns[_i].column_edit_url, row.original);\r\n\r\n                  doubleClickContent =\r\n                      <AutoUpdateInput className=\"altrp-inherit altrp-table-td__double-click-content\"\r\n                                       route={columnEditUrl}\r\n                                       resourceid={''}\r\n                                       changevalue={(value)=>{\r\n                                         setUpdatedData({\r\n                                           value,\r\n                                           rowId:row.original.id,\r\n                                           column:columns[_i]._accessor\r\n                                         });\r\n                                       }}\r\n                                       value={_cellContent}/>;\r\n                  cellProps.onDoubleClick = () => {\r\n                    if(doubleClicked.column === columns[_i]._accessor && doubleClicked.rowId === row.original.id){\r\n                      setDoubleClicked({});\r\n                    } else {\r\n                      setDoubleClicked({\r\n                        column: columns[_i]._accessor,\r\n                        rowId: row.original.id,\r\n                      });\r\n                    }\r\n                  };\r\n                }\r\n                let cellClassName = `altrp-table-td ${cell.column.column_body_alignment ? `altrp-table-td_alignment-${cell.column.column_body_alignment}` : '' } `;\r\n                if(doubleClicked.column === columns[_i]._accessor && row.original.id === doubleClicked.rowId){\r\n                  cellClassName += ' altrp-table-td_double-clicked';\r\n                }\r\n              /**\r\n               * Если в настройках table_hover_row: false, - background для отдельной ячейки\r\n               */\r\n                if (!settings.table_hover_row) {\r\n                  cellClassName += ' altrp-table-background';\r\n                }\r\n\r\n                /**\r\n                 * Если значение объект или массив, то отобразим пустую строку\r\n                 */\r\n                if(_.isObject(cell.value)){\r\n                  cellContent = '';\r\n                }\r\n                /**\r\n                 * Если в настройках колонки есть url, и в данных есть id, то делаем ссылку\r\n                 */\r\n                if(columns[_i].column_link){\r\n                  cellContent = React.createElement(linkTag, {\r\n                    to: parseURLTemplate(columns[_i].column_link, row.original),\r\n                    href: parseURLTemplate(columns[_i].column_link, row.original),\r\n                    target: columns[_i].column_blank_link ? '_blank' : '',\r\n                    className: 'altrp-inherit altrp-table-td__default-content',\r\n                    dangerouslySetInnerHTML: {\r\n                      __html: cell.value\r\n                    }\r\n                  })\r\n                } else {\r\n                  cellContent = React.createElement('span', {\r\n                    className: 'altrp-inherit altrp-table-td__default-content',\r\n                    dangerouslySetInnerHTML: {\r\n                       __html: cell.value\r\n                    }\r\n                  })\r\n                }\r\n                /**\r\n                 * Если нужно указать номер по порядку\r\n                 */\r\n                if(cell.column._accessor && (cell.column._accessor.trim() === '##')){\r\n                  cellContent = (counter++) + '';\r\n                }\r\n                let cellStyles = _.get(cell, 'column.column_styles_field');\r\n                cellStyles = _.get(row.original, cellStyles, '');\r\n                cellStyles = mbParseJSON(cellStyles, {});\r\n\r\n                style = _.assign(style, cellStyles);\r\n                /**\r\n                 * Если есть actions, то надо их вывести\r\n                 */\r\n                if(_.get(cell,'column.actions.length')){\r\n                  return <td {...cellProps}\r\n                             className={cellClassName}\r\n                             style={style}>{renderCellActions(cell, row)}</td>\r\n                }\r\n                if(_.isString(cellContent) && ! doubleClickContent){\r\n                  return <td {...cellProps}\r\n                             className={cellClassName}\r\n                             dangerouslySetInnerHTML={\r\n                               {__html:cellContent + ''}\r\n                             }\r\n                             style={style}>\r\n                  </td>\r\n                }\r\n                return <td {...cellProps}\r\n                           className={cellClassName}\r\n                           style={style}>\r\n                    {cellContent}{doubleClickContent}\r\n                  </td>\r\n              })}\r\n            </tr></React.Fragment>\r\n          )\r\n      })}\r\n    </tbody>\r\n    {renderFooter(settings, data)}\r\n  </table>\r\n    {((query.paginationType === 'prev-next') && query.pageSize) ?\r\n      <div className=\"altrp-pagination\">\r\n        <button className={\"altrp-pagination__previous\"}\r\n                onClick={() => {\r\n                  setPage(old => Math.max(old - 1, 0));\r\n                  setDoubleClicked({});\r\n                  setUpdatedData({});\r\n                }}\r\n                disabled={page === 1}>\r\n          {settings.prev_text || ''}\r\n        </button>\r\n        <div className=\"altrp-pagination__count\">\r\n          {settings.current_page_text || 'Current Page:'}\r\n           {page}\r\n        </div>\r\n        <button className=\"altrp-pagination__next\"\r\n                onClick={() => {\r\n                  setUpdatedData({});\r\n                  setDoubleClicked({});\r\n                  setPage(old => (!_latestData || !_latestData.hasMore ? old : old + 1))\r\n                }}\r\n                disabled={!_latestData || !_latestData.hasMore}>\r\n          {settings.next_text || ''}\r\n\r\n        </button>\r\n      </div> : ''\r\n    }\r\n  </>\r\n};\r\n\r\n/**\r\n * Парсинг колонок из настроек в колонки для react-table\r\n * @param settings\r\n * @return {Array}\r\n */\r\nexport function settingsToColumns(settings) {\r\n  let columns = [];\r\n  let { tables_columns } = settings;\r\n  tables_columns = tables_columns || [];\r\n  /**\r\n   * Если в колонке пустые поля, то мы их игнорируем, чтобы не было ошибки\r\n   */\r\n  tables_columns.forEach(_column => {\r\n    /**\r\n     * Колонку проказываем, если есть accessor или список actions\r\n     */\r\n    if (_column.column_name && ((_column.actions && _column.actions.length) || _column.accessor)) {\r\n      _column._accessor = _column.accessor;\r\n      columns.push(_column);\r\n    }\r\n  });\r\n  return columns;\r\n}\r\n\r\n/**\r\n *\r\n * @param {{}}settings\r\n * @return {string|array}\r\n */\r\nexport function renderAdditionalRows(settings) {\r\n  let { additional_rows } = settings;\r\n  if(! _.isArray(additional_rows)){\r\n    return '';\r\n  }\r\n  return additional_rows.map(row=>{\r\n    row.additional_cells = row.additional_cells || [];\r\n    return<tr key={`additional-row-${row.id}`}>\r\n      {row.additional_cells.map(cell=>{\r\n        cell.rowspan = cell.rowspan || 1;\r\n        cell.colspan = cell.colspan || 1;\r\n        return<th key={`additional-cell-${row.id}-${cell.id}`}\r\n                  role=\"columnheader\"\r\n                  className=\"altrp-table-th altrp-table-cell\"\r\n                  colSpan={cell.colspan}\r\n                  rowSpan={cell.rowspan}>{cell.title}</th>\r\n      })}\r\n    </tr>\r\n  })\r\n}\r\n\r\n/**\r\n * Отрисовка главного заголовка колонки для таблицы\r\n * @param {{}}column\r\n * @param {{}}sortSetting\r\n * @param {{}}filterSetting\r\n * @param {function}sortingHandler\r\n * @param {function}filterHandler\r\n * @return {*}\r\n */\r\nfunction renderTh({column, sortSetting, sortingHandler, filterSetting, filterHandler}){\r\n  const { column_width, column_header_alignment } = column;\r\n  let thProps = {...column.getHeaderProps()};\r\n  const style = {};\r\n  if (column_width) style.width = column_width;\r\n  if (column_header_alignment) style.textAlign = column_header_alignment;\r\n  thProps.className = 'altrp-table-th';\r\n  if(column.column_is_sorted){\r\n    thProps.onClick = () => sortingHandler(column._accessor);\r\n    thProps.className += ' clickable'\r\n  }\r\n  if(column.column_width){\r\n    thProps.width = column.column_width + '%';\r\n  }\r\n  let thText = column.render('column_name');\r\n  return <th {...thProps} style={style}>\r\n    {thText}\r\n    { sortSetting && column.column_is_sorted && (sortSetting.order_by === column._accessor)\r\n      && (sortSetting.order === \"DESC\" ?\r\n        iconsManager().renderIcon('chevron', {className:'rotate-180 sort-icon '}) :\r\n        iconsManager().renderIcon('chevron', {className: 'sort-icon'}))}\r\n    {column.column_is_filtered &&\r\n    <label className=\"altrp-label\">\r\n    <input type=\"text\"\r\n           onClick={e => {e.stopPropagation()}}\r\n           onChange={e=>{\r\n             e.stopPropagation();\r\n             let value = e.target.value;\r\n             filterHandler(column._accessor, value)\r\n           }}\r\n           value={filterSetting[column._accessor] || ''}\r\n           className=\"altrp-field\"/>\r\n    </label>}\r\n\r\n  </th>\r\n}\r\n\r\n/**\r\n * Получить поле для группировки строк\r\n * @param {array} columns - array({\r\n *  group_by:{boolean},\r\n *  accessor:{string},\r\n * })\r\n *\r\n * @return {string|null}\r\n */\r\nfunction getGroupBy(columns){\r\n  let groupBy = null;\r\n  columns.forEach(column=>{\r\n    if(column.group_by){\r\n      groupBy = column.accessor;\r\n    }\r\n  });\r\n  return groupBy;\r\n}\r\n\r\n/**\r\n * Выводит группирующую строку в таблице\r\n * @params {{}} row\r\n * @params {null|string} row\r\n * @params {array} groupingStore\r\n * @params {{}} settings\r\n * @params {boolean} collapsing\r\n * @params {function} setCollapsedGroups\r\n * @params {array} collapsedGroups\r\n * @return {string|React.Component}\r\n */\r\nfunction renderGroupingTr(row, groupBy, groupingStore, settings = {}, collapsing, setCollapsedGroups, collapsedGroups){\r\n  if(! groupBy){\r\n    return null;\r\n  }\r\n  let text = _.get(row, 'original.' + groupBy, '');\r\n  if(! text){\r\n    text = _.get(settings, 'group_default_text', '');\r\n  }\r\n  if(groupingStore.indexOf(text) >= 0){\r\n    return null;\r\n  }\r\n  groupingStore.push(text);\r\n  let collapsed = (collapsedGroups.indexOf(text) !== -1);\r\n  let {collapsed_icon, expanded_icon} = settings;\r\n  /**\r\n   * С сервера может приходить массив если иконка удалена\r\n   */\r\n  if(_.isArray(collapsed_icon)){\r\n    collapsed_icon = null;\r\n  }\r\n  if(_.isArray(expanded_icon)){\r\n    expanded_icon = null;\r\n  }\r\n  return text ? <tr className=\"altrp-table-tr\" >\r\n    <td colSpan={_.get(row, 'cells.length', 1)}\r\n        onClick={()=>{\r\n          collapsing && toggleGroup(text, setCollapsedGroups, collapsedGroups)\r\n        }}\r\n        className={`altrp-table-td__grouping altrp-table-td altrp-table-background ${collapsing\r\n            ? (collapsed ? 'altrp-pointer' : 'altrp-pointer active') : ''} `}>\r\n      {collapsing ? (<span className={`altrp-table__collapse-icon ${collapsed ? 'altrp-table__collapse-icon_collapsed' : ''}`}>{\r\n            collapsed ? renderAsset(collapsed_icon || {\r\n                  assetType: \"icon\",\r\n                  name: \"add\",\r\n                })\r\n                : renderAsset(expanded_icon || {\r\n                  assetType: \"icon\",\r\n                  name: \"minus\",\r\n                })\r\n        }</span>\r\n      ) : null}\r\n      {text}\r\n    </td>\r\n  </tr> : null;\r\n}\r\n\r\n/**\r\n * Сохраняет/удаляет текущаю группу по заголовку из с списка схлопнутых групп в таблице\r\n * @param {string} currentRowHeading\r\n * @param {function} setCollapsedGroups - функция задает новый список collapsedGroups\r\n * @param {array} collapsedGroups - список заголовков, которые схлопнуты\r\n */\r\nfunction toggleGroup(currentRowHeading, setCollapsedGroups, collapsedGroups) {\r\n\r\n  if(collapsedGroups.indexOf(currentRowHeading) === -1){\r\n    collapsedGroups.push(currentRowHeading);\r\n    setCollapsedGroups([...collapsedGroups]);\r\n  } else {\r\n    collapsedGroups = _.filter(collapsedGroups, g=>{\r\n      return g !== currentRowHeading;\r\n    });\r\n    setCollapsedGroups(collapsedGroups);\r\n  }\r\n}\r\n\r\n/**\r\n * Отрисовка футера таблицы\r\n * @param {{}}settings\r\n * @param {array}data\r\n */\r\n\r\nfunction renderFooter(settings, data){\r\n  let footerColumns = settings.footer_columns || [];\r\n  if(footerColumns.length === 0){\r\n    return null;\r\n  }\r\n  return <tfoot className=\"altrp-table-foot\">\r\n  <tr className=\"altrp-table-tr\">\r\n    {footerColumns.map(footerColumn=>{\r\n      const style = {\r\n        textAlign: footerColumn.column_footer_alignment || 'left'\r\n      };\r\n      let content = footerColumn.content;\r\n      if(content.indexOf('{{altrphelpers.') !== -1){\r\n        window.altrphelpers.context = data;\r\n        content = content.replace(/{{/g, '').replace(/}}/g, '');\r\n        try{\r\n          content = eval(content);\r\n        } catch(e){\r\n          console.log(content);\r\n          console.error(e);\r\n          content = '';\r\n        }\r\n      } else {\r\n        content = replaceContentWithData(content);\r\n      }\r\n      return <td className=\"altrp-table-td\"\r\n                 key={footerColumn.id}\r\n                 style={style}\r\n                 colSpan={footerColumn.colspan || 1}>{content}</td>\r\n    })}\r\n  </tr>\r\n  </tfoot>\r\n}\r\n\r\n\r\n/**\r\n * Выводит список элементов соответствующих настройкам Actions для колнки\r\n * @param cell\r\n * @param row\r\n */\r\nexport function renderCellActions(cell, row = {}) {\r\n  let actions = _.get(cell,'column.actions', []);\r\n  return <div className=\"altrp-actions\">\r\n    {actions.map(action =>{\r\n      let tag = action.type || 'Link';\r\n      let actionContent = replaceContentWithData(action.text || '');\r\n      let link = parseURLTemplate(action.link, row.original);\r\n      const actionProps = {\r\n        className: 'altrp-actions-item altrp-link ' + (action.classes || ''),\r\n        style: {},\r\n        key: (action.id || '') + (row.id || ''),\r\n        title: action.text || '',\r\n      };\r\n      actionProps.style.marginLeft = _.get(action, 'spacing.left')\r\n          ? _.get(action, 'spacing.left') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginRight = _.get(action, 'spacing.right')\r\n          ? _.get(action, 'spacing.right') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginTop = _.get(action, 'spacing.top')\r\n          ? _.get(action, 'spacing.top') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      actionProps.style.marginBottom = _.get(action, 'spacing.bottom')\r\n          ? _.get(action, 'spacing.bottom') + _.get(action, 'spacing.unit')\r\n          : null;\r\n      if(tag === 'Link'){\r\n        tag = Link;\r\n        actionProps.to = link;\r\n      }\r\n\r\n      if(tag === 'a' && action.target_blank){\r\n        actionProps.target = '_blank';\r\n      }\r\n      if(tag === 'a') {\r\n        actionProps.href = parseURLTemplate(action.link, row.original);\r\n      }\r\n      if(_.get(action, 'icon.assetType')){\r\n        let iconSize = _.get(action, 'size.size') ? _.get(action, 'size.size') + _.get(action, 'size.unit', 'px') : null;\r\n        const iconProps = {className: 'altrp-actions-item__icon',\r\n          style:{\r\n          }};\r\n\r\n        if(iconSize){\r\n          iconProps.style.width = iconSize;\r\n          iconProps.style.height = iconSize;\r\n        }\r\n        actionContent = renderAsset(action.icon, iconProps)\r\n      }\r\n      return React.createElement(tag, actionProps, actionContent);\r\n    })}\r\n  </div>\r\n}\r\n\r\n\r\nexport default (props) => {\r\n  return <AltrpQueryComponent {...props}><AltrpTable/></AltrpQueryComponent>\r\n}"],"sourceRoot":""}